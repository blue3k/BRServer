////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) 2016 Blue3k
// 
// Author : KyungKun Ko
//
// Description : Autogenerated file, Svr
//
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;


namespace BR {
	public partial struct ResultCode {

		// Server service failed 
		const uint E_SVR_SERVICE_FAILED =                                   unchecked(0xE7040000); 

		// Timed out 
		const uint E_SVR_TIMEOUT =                                          unchecked(0xE7040001); 

		// Transaction has invalid state transition 
		const uint E_SVR_TRANSACTION_INVALID_STATE =                        unchecked(0xE7040002); 

		// Server Transaction timed out 
		const uint E_SVR_INVALID_TRANSITION =                               unchecked(0xE7040003); 

		// Transaction process Time out 
		const uint E_SVR_TRANSACTION_TIMEOUT =                              unchecked(0xE7040004); 

		// Failed to route message 
		const uint E_SVR_ROUTEMSG_FAILED =                                  unchecked(0xE7040005); 

		// No result handler 
		const uint E_SVR_NO_RESULT_HANDLER =                                unchecked(0xE7040006); 

		// No message handler 
		const uint E_SVR_NO_MESSAGE_HANDLER =                               unchecked(0xE7040007); 

		// Invalid server ID 
		const uint E_SVR_INVALID_SERVERID =                                 unchecked(0xE7040008); 

		// Player not found 
		const uint E_SVR_PLAYER_NOT_FOUND =                                 unchecked(0xE7040009); 

		// Player state is invalid 
		const uint E_SVR_INVALID_PLAYER_STATE =                             unchecked(0xE704000A); 

		// Invalid player game db data 
		const uint E_SVR_INVALID_PLAYER_GAMEDB =                            unchecked(0xE704000B); 

		// Not expected server message 
		const uint E_SVR_NOTEXPECTED_MESSAGE =                              unchecked(0xE704000C); 

		// Invalid entity UID 
		const uint E_SVR_INVALID_ENTITYUID =                                unchecked(0xE704000D); 

		// Cluster service not ready 
		const uint E_SVR_CLUSTER_NOTREADY =                                 unchecked(0xE704000E); 

		// Invalid cluster type 
		const uint E_SVR_INVALID_CLUSTERTYPE =                              unchecked(0xE704000F); 

		// Invalid cluster ID 
		const uint E_SVR_INVALID_CLUSTERID =                                unchecked(0xE7040010); 

		// Invalid queue item 
		const uint E_SVR_INVALID_QUEUEITEM =                                unchecked(0xE7040011); 

		// Queue item is canceled 
		const uint E_SVR_QUEUEITEM_CANCELED =                               unchecked(0xE7040012); 

		// There is no item in queue 
		const uint E_SVR_NOITEM_INQUEUE =                                   unchecked(0xE7040013); 

		// Already in queue 
		const uint E_SVR_ALREADY_INQUEUE =                                  unchecked(0xE7040014); 

		// Queue item is reserved 
		const uint E_SVR_RESERVED_QUEUEITEM =                               unchecked(0xE7040015); 

		// Cluster doesn't have any assigned master 
		const uint E_SVR_CLUSTER_NOMASTER =                                 unchecked(0xE7040016); 

		// Queue item is reserved for cancel 
		const uint S_SVR_QUEUEITEM_CANCEL_PENDED =                          unchecked(0x27040017); 

		// Thread is wrong, running on wrong thread? 
		const uint E_SVR_INVALID_THREAD =                                   unchecked(0xE7040018); 

		// Purchase canceled 
		const uint E_SVR_PURCHASE_CANCELED =                                unchecked(0xE7040019); 

		// Invalid receipt info 
		const uint E_SVR_INVALID_PURCHASE_INFO =                            unchecked(0xE704001A); 

		// Invalid duplicated purchase 
		const uint E_SVR_INVALID_PURCHASE_DUPLICATED =                      unchecked(0xE704001B); 

		// External auth fail 
		const uint E_SVR_INVALID_EXTERNAL_AUTH =                            unchecked(0xE704001C); 

		// External server is not available 
		const uint E_SVR_EXTERNAL_SERVER_UNAVALIABLE =                      unchecked(0xE704001D); 

		// Invalid receipt result from server 
		const uint E_SVR_INVALID_PURCHASE_FORMAT =                          unchecked(0xE704001E); 

		// The protocol is not supported. 
		const uint E_SVR_CURL_UNSUPPORTED_PROTOCOL =                        unchecked(0xE704001F); 

		// CURL initialization is failed. 
		const uint E_SVR_CURL_FAILED_INIT =                                 unchecked(0xE7040020); 

		// Invalid URL format. 
		const uint E_SVR_CURL_URL_MALFORMAT =                               unchecked(0xE7040021); 

		// Not a build-in feature. 
		const uint E_SVR_CURL_NOT_BUILT_IN =                                unchecked(0xE7040022); 

		// Failed to resolve URL. 
		const uint E_SVR_CURL_COULDNT_RESOLVE_PROXY =                       unchecked(0xE7040023); 

		// Failed to resolve URL. 
		const uint E_SVR_CURL_COULDNT_RESOLVE_HOST =                        unchecked(0xE7040024); 

		// Connection is failed 
		const uint E_SVR_CURL_COULDNT_CONNECT =                             unchecked(0xE7040025); 

		// HTTP Post can't be done. 
		const uint E_SVR_CURL_HTTP_POST_ERROR =                             unchecked(0xE7040026); 

		// Not supported SSL type. 
		const uint E_SVR_CURL_SSL_ENGINE_NOTFOUND =                         unchecked(0xE7040027); 

		// Not supported SSL type. 
		const uint E_SVR_CURL_SSL_ENGINE_SETFAILED =                        unchecked(0xE7040028); 

		// Network send failed 
		const uint E_SVR_CURL_SEND_ERROR =                                  unchecked(0xE7040029); 

		// Network receive failed 
		const uint E_SVR_CURL_RECV_ERROR =                                  unchecked(0xE704002A); 

		// Invalid SSL setting. 
		const uint E_SVR_CURL_USE_SSL_FAILED =                              unchecked(0xE704002B); 

		// No Connection is available now. 
		const uint E_SVR_CURL_NO_CONNECTION_AVAILABLE =                     unchecked(0xE704002C); 

	}
}

