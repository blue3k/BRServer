//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class NetAddress : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NetAddress(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NetAddress obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe string strAddr {
    set {
      BRMonitoringPINVOKE.NetAddress_strAddr_set(swigCPtr, value);
    } 
    get {
      string ret = BRMonitoringPINVOKE.NetAddress_strAddr_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe ushort usPort {
    set {
      BRMonitoringPINVOKE.NetAddress_usPort_set(swigCPtr, value);
    } 
    get {
      ushort ret = BRMonitoringPINVOKE.NetAddress_usPort_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe SockFamily SocketFamily {
    set {
      BRMonitoringPINVOKE.NetAddress_SocketFamily_set(swigCPtr, (int)value);
    } 
    get {
      SockFamily ret = (SockFamily)BRMonitoringPINVOKE.NetAddress_SocketFamily_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe NetAddress() : this(BRMonitoringPINVOKE.new_NetAddress__SWIG_0(), true) {
  }

  public unsafe NetAddress(SockFamily sockFamily, string strAdr, ushort port) : this(BRMonitoringPINVOKE.new_NetAddress__SWIG_1((int)sockFamily, strAdr, port), true) {
  }

  public unsafe NetAddress(SockFamily sockFamily, string strAdr) : this(BRMonitoringPINVOKE.new_NetAddress__SWIG_2((int)sockFamily, strAdr), true) {
  }

  public unsafe NetAddress(int arg0) : this(BRMonitoringPINVOKE.new_NetAddress__SWIG_3(arg0), true) {
  }

  public unsafe bool EqualTo(NetAddress op) {
    bool ret = BRMonitoringPINVOKE.NetAddress_EqualTo(swigCPtr, NetAddress.getCPtr(op));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe static readonly int MAX_NETNAME = BRMonitoringPINVOKE.NetAddress_MAX_NETNAME_get();

}

}
