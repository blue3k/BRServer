//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class MatchingQueueItem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MatchingQueueItem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MatchingQueueItem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe EntityUID RegisterUID {
    set {
      BRMonitoringPINVOKE.MatchingQueueItem_RegisterUID_set(swigCPtr, EntityUID.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BRMonitoringPINVOKE.MatchingQueueItem_RegisterUID_get(swigCPtr);
      EntityUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new EntityUID(cPtr, false);
      return ret;
    } 
  }

  public unsafe ulong RegisterID {
    set {
      BRMonitoringPINVOKE.MatchingQueueItem_RegisterID_set(swigCPtr, value);
    } 
    get {
      ulong ret = BRMonitoringPINVOKE.MatchingQueueItem_RegisterID_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe uint NumPlayers {
    set {
      BRMonitoringPINVOKE.MatchingQueueItem_NumPlayers_set(swigCPtr, value);
    } 
    get {
      uint ret = BRMonitoringPINVOKE.MatchingQueueItem_NumPlayers_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe MatchingPlayerInformation Players {
    set {
      BRMonitoringPINVOKE.MatchingQueueItem_Players_set(swigCPtr, MatchingPlayerInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BRMonitoringPINVOKE.MatchingQueueItem_Players_get(swigCPtr);
      MatchingPlayerInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MatchingPlayerInformation(cPtr, false);
      return ret;
    } 
  }

  public unsafe MatchingQueueItem() : this(BRMonitoringPINVOKE.new_MatchingQueueItem__SWIG_0(), true) {
  }

  public unsafe MatchingQueueItem(MatchingQueueItem src) : this(BRMonitoringPINVOKE.new_MatchingQueueItem__SWIG_1(MatchingQueueItem.getCPtr(src)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe MatchingQueueItem(EntityUID RegisterUID, ulong RegisterID, uint numPlayer, MatchingPlayerInformation playerInformations) : this(BRMonitoringPINVOKE.new_MatchingQueueItem__SWIG_2(EntityUID.getCPtr(RegisterUID), RegisterID, numPlayer, MatchingPlayerInformation.getCPtr(playerInformations)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe MatchingQueueItem(int initValue) : this(BRMonitoringPINVOKE.new_MatchingQueueItem__SWIG_3(initValue), true) {
  }

  public unsafe SWIGTYPE_p_Result SetQueueItem(EntityUID RegisterUID, ulong RegisterID, uint numPlayer, MatchingPlayerInformation playerInformations) {
    SWIGTYPE_p_Result ret = new SWIGTYPE_p_Result(BRMonitoringPINVOKE.MatchingQueueItem_SetQueueItem(swigCPtr, EntityUID.getCPtr(RegisterUID), RegisterID, numPlayer, MatchingPlayerInformation.getCPtr(playerInformations)), true);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe MatchingQueueItem CopyFrom(MatchingQueueItem src) {
    MatchingQueueItem ret = new MatchingQueueItem(BRMonitoringPINVOKE.MatchingQueueItem_CopyFrom(swigCPtr, MatchingQueueItem.getCPtr(src)), false);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe bool EqualTo(MatchingQueueItem op) {
    bool ret = BRMonitoringPINVOKE.MatchingQueueItem_EqualTo(swigCPtr, MatchingQueueItem.getCPtr(op));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe static readonly int MAX_NUM_PLAYER = BRMonitoringPINVOKE.MatchingQueueItem_MAX_NUM_PLAYER_get();

}

}
