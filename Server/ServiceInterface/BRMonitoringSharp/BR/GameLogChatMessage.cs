//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class GameLogChatMessage : GameLogItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GameLogChatMessage(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.GameLogChatMessage_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameLogChatMessage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public unsafe ulong Player {
    set {
      BRMonitoringPINVOKE.GameLogChatMessage_Player_set(swigCPtr, value);
    } 
    get {
      ulong ret = BRMonitoringPINVOKE.GameLogChatMessage_Player_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe byte PlayerStatus {
    set {
      BRMonitoringPINVOKE.GameLogChatMessage_PlayerStatus_set(swigCPtr, value);
    } 
    get {
      byte ret = BRMonitoringPINVOKE.GameLogChatMessage_PlayerStatus_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe ChatType MessageType {
    set {
      BRMonitoringPINVOKE.GameLogChatMessage_MessageType_set(swigCPtr, (int)value);
    } 
    get {
      ChatType ret = (ChatType)BRMonitoringPINVOKE.GameLogChatMessage_MessageType_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe ushort MessageBufferSize {
    set {
      BRMonitoringPINVOKE.GameLogChatMessage_MessageBufferSize_set(swigCPtr, value);
    } 
    get {
      ushort ret = BRMonitoringPINVOKE.GameLogChatMessage_MessageBufferSize_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe string MessageText {
    set {
      BRMonitoringPINVOKE.GameLogChatMessage_MessageText_set(swigCPtr, value);
    } 
    get {
      string ret = BRMonitoringPINVOKE.GameLogChatMessage_MessageText_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe GameLogChatMessage(uint timeStamp, uint messageBufferSize) : this(BRMonitoringPINVOKE.new_GameLogChatMessage(timeStamp, messageBufferSize), true) {
  }

  public unsafe int SetChatMessage(ulong player, byte playerStatus, ChatType type, string message) {
    int ret = BRMonitoringPINVOKE.GameLogChatMessage_SetChatMessage(swigCPtr, player, playerStatus, (int)type, message);
    return ret;
  }

}

}
