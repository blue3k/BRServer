//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class INet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal INet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(INet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~INet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BRMonitoringPINVOKE.delete_INet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Event : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Event(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Event obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public unsafe INet.Event.EventTypes EventType {
      set {
        BRMonitoringPINVOKE.INet_Event_EventType_set(swigCPtr, (int)value);
      } 
      get {
        INet.Event.EventTypes ret = (INet.Event.EventTypes)BRMonitoringPINVOKE.INet_Event_EventType_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe IConnection EventConnection {
      set {
        BRMonitoringPINVOKE.INet_Event_EventConnection_set(swigCPtr, IConnection.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BRMonitoringPINVOKE.INet_Event_EventConnection_get(swigCPtr);
        IConnection ret = (cPtr == global::System.IntPtr.Zero) ? null : new IConnection(cPtr, false);
        return ret;
      } 
    }
  
    public unsafe Event(SWIGTYPE_p_void ptr) : this(BRMonitoringPINVOKE.new_INet_Event__SWIG_0(SWIGTYPE_p_void.getCPtr(ptr)), true) {
    }
  
    public unsafe Event() : this(BRMonitoringPINVOKE.new_INet_Event__SWIG_1(), true) {
    }
  
    public unsafe Event(INet.Event.EventTypes eventType, IConnection pCon) : this(BRMonitoringPINVOKE.new_INet_Event__SWIG_2((int)eventType, IConnection.getCPtr(pCon)), true) {
    }
  
    public unsafe Event(INet.Event.EventTypes eventType) : this(BRMonitoringPINVOKE.new_INet_Event__SWIG_3((int)eventType), true) {
    }
  
    public unsafe INet.Event CopyFrom(INet.Event src) {
      INet.Event ret = new INet.Event(BRMonitoringPINVOKE.INet_Event_CopyFrom(swigCPtr, INet.Event.getCPtr(src)), false);
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public unsafe bool EqualTo(INet.Event src) {
      bool ret = BRMonitoringPINVOKE.INet_Event_EqualTo(swigCPtr, INet.Event.getCPtr(src));
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public unsafe bool NotEqualTo(INet.Event src) {
      bool ret = BRMonitoringPINVOKE.INet_Event_NotEqualTo(swigCPtr, INet.Event.getCPtr(src));
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public enum EventTypes {
      EVT_NONE,
      EVT_NET_INITIALIZED,
      EVT_NET_CLOSED,
      EVT_NEW_CONNECTION,
      EVT_CONNECTION_DISCONNECTED,
      EVT_MAX
    }
  
  }

  public unsafe NetClass m_NetClass {
    set {
      BRMonitoringPINVOKE.INet_m_NetClass_set(swigCPtr, (int)value);
    } 
    get {
      NetClass ret = (NetClass)BRMonitoringPINVOKE.INet_m_NetClass_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe NetClass GetNetClass() {
    NetClass ret = (NetClass)BRMonitoringPINVOKE.INet_GetNetClass(swigCPtr);
    return ret;
  }

  public unsafe void Release() {
    BRMonitoringPINVOKE.INet_Release(swigCPtr);
  }

  public unsafe bool IsReady() {
    bool ret = BRMonitoringPINVOKE.INet_IsReady(swigCPtr);
    return ret;
  }

  public unsafe int DequeueNetEvent(INet.Event curEvent) {
    int ret = BRMonitoringPINVOKE.INet_DequeueNetEvent(swigCPtr, INet.Event.getCPtr(curEvent));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int EnqueueNetEvent(INet.Event curEvent) {
    int ret = BRMonitoringPINVOKE.INet_EnqueueNetEvent(swigCPtr, INet.Event.getCPtr(curEvent));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int Connect(IConnection pIConn, uint remoteID, NetClass netClass, NetAddress destAddress) {
    int ret = BRMonitoringPINVOKE.INet_Connect(swigCPtr, IConnection.getCPtr(pIConn), remoteID, (int)netClass, NetAddress.getCPtr(destAddress));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int ReleaseConnection(IConnection pIConnection) {
    int ret = BRMonitoringPINVOKE.INet_ReleaseConnection(swigCPtr, IConnection.getCPtr(pIConnection));
    return ret;
  }

  public unsafe int TakeOverConnection(IConnection pIConnection) {
    int ret = BRMonitoringPINVOKE.INet_TakeOverConnection(swigCPtr, IConnection.getCPtr(pIConnection));
    return ret;
  }

}

}
