//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class PerformanceCounterInstance : SharedObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PerformanceCounterInstance(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.PerformanceCounterInstance_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PerformanceCounterInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public unsafe uint GetUpdatedTime() {
    uint ret = BRMonitoringPINVOKE.PerformanceCounterInstance_GetUpdatedTime(swigCPtr);
    return ret;
  }

  public unsafe string GetInstanceName() {
    string ret = BRMonitoringPINVOKE.PerformanceCounterInstance_GetInstanceName(swigCPtr);
    return ret;
  }

  public unsafe EntityUID GetInstanceEntityUID() {
    EntityUID ret = new EntityUID(BRMonitoringPINVOKE.PerformanceCounterInstance_GetInstanceEntityUID(swigCPtr), true);
    return ret;
  }

  public unsafe ArrayPerformanceCounterPtr GetCounters() {
    ArrayPerformanceCounterPtr ret = new ArrayPerformanceCounterPtr(BRMonitoringPINVOKE.PerformanceCounterInstance_GetCounters(swigCPtr), false);
    return ret;
  }

  public unsafe void RegisterToClient() {
    BRMonitoringPINVOKE.PerformanceCounterInstance_RegisterToClient(swigCPtr);
  }

  public unsafe int AddCounter(PerformanceCounter pCounter) {
    int ret = BRMonitoringPINVOKE.PerformanceCounterInstance_AddCounter(swigCPtr, PerformanceCounter.getCPtr(pCounter));
    return ret;
  }

}

}
