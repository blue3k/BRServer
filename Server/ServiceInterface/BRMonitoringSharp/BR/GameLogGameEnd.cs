//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class GameLogGameEnd : GameLogItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GameLogGameEnd(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.GameLogGameEnd_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameLogGameEnd obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public unsafe GameWinner Winner {
    set {
      BRMonitoringPINVOKE.GameLogGameEnd_Winner_set(swigCPtr, (int)value);
    } 
    get {
      GameWinner ret = (GameWinner)BRMonitoringPINVOKE.GameLogGameEnd_Winner_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe GameLogGameEnd(SWIGTYPE_p_std__chrono__time_pointT_ClockType_DurationSec_t timeStamp) : this(BRMonitoringPINVOKE.new_GameLogGameEnd(SWIGTYPE_p_std__chrono__time_pointT_ClockType_DurationSec_t.getCPtr(timeStamp)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe void SetWinner(GameWinner winner) {
    BRMonitoringPINVOKE.GameLogGameEnd_SetWinner(swigCPtr, (int)winner);
  }

}

}
