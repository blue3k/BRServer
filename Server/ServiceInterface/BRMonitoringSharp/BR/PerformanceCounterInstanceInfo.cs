//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class PerformanceCounterInstanceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PerformanceCounterInstanceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PerformanceCounterInstanceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe string InstanceName {
    set {
      BRMonitoringPINVOKE.PerformanceCounterInstanceInfo_InstanceName_set(swigCPtr, value);
    } 
    get {
      string ret = BRMonitoringPINVOKE.PerformanceCounterInstanceInfo_InstanceName_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe EntityUID InstanceUID {
    set {
      BRMonitoringPINVOKE.PerformanceCounterInstanceInfo_InstanceUID_set(swigCPtr, EntityUID.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BRMonitoringPINVOKE.PerformanceCounterInstanceInfo_InstanceUID_get(swigCPtr);
      EntityUID ret = (cPtr == global::System.IntPtr.Zero) ? null : new EntityUID(cPtr, false);
      return ret;
    } 
  }

  public unsafe bool EqualTo(PerformanceCounterInstanceInfo op) {
    bool ret = BRMonitoringPINVOKE.PerformanceCounterInstanceInfo_EqualTo(swigCPtr, PerformanceCounterInstanceInfo.getCPtr(op));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
