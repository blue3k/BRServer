//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class NetSvrPolicyMonitoring : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NetSvrPolicyMonitoring(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NetSvrPolicyMonitoring obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe NetSvrPolicyMonitoring(IConnection pConn) : this(BRMonitoringPINVOKE.new_NetSvrPolicyMonitoring(IConnection.getCPtr(pConn)), true) {
  }

  public unsafe SWIGTYPE_p_Result GetInstanceListRes(TransactionID InTransactionID, SWIGTYPE_p_Result InResult, ArrayPerformanceCounterInstanceInfo InCounterInstances, uint InTotalInstanceCount) {
    SWIGTYPE_p_Result ret = new SWIGTYPE_p_Result(BRMonitoringPINVOKE.NetSvrPolicyMonitoring_GetInstanceListRes(swigCPtr, TransactionID.getCPtr(InTransactionID), SWIGTYPE_p_Result.getCPtr(InResult), ArrayPerformanceCounterInstanceInfo.getCPtr(InCounterInstances), InTotalInstanceCount), true);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe SWIGTYPE_p_Result RequestCounterValuesRes(TransactionID InTransactionID, SWIGTYPE_p_Result InResult, EntityUID InInstanceUID, ArrayUInt64 InCounterValues) {
    SWIGTYPE_p_Result ret = new SWIGTYPE_p_Result(BRMonitoringPINVOKE.NetSvrPolicyMonitoring_RequestCounterValuesRes(swigCPtr, TransactionID.getCPtr(InTransactionID), SWIGTYPE_p_Result.getCPtr(InResult), EntityUID.getCPtr(InInstanceUID), ArrayUInt64.getCPtr(InCounterValues)), true);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe SWIGTYPE_p_Result PerformanceCounterUpdateCounterInfoS2CEvt(EntityUID InInstanceUID) {
    SWIGTYPE_p_Result ret = new SWIGTYPE_p_Result(BRMonitoringPINVOKE.NetSvrPolicyMonitoring_PerformanceCounterUpdateCounterInfoS2CEvt(swigCPtr, EntityUID.getCPtr(InInstanceUID)), true);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
