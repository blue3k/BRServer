//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class RouteContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RouteContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RouteContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe SWIGTYPE_p_unsigned___int64 ContextValue {
    set {
      BRMonitoringPINVOKE.RouteContext_ContextValue_set(swigCPtr, SWIGTYPE_p_unsigned___int64.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BRMonitoringPINVOKE.RouteContext_ContextValue_get(swigCPtr);
      SWIGTYPE_p_unsigned___int64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned___int64(cPtr, false);
      return ret;
    } 
  }

  public unsafe RouteContext() : this(BRMonitoringPINVOKE.new_RouteContext__SWIG_0(), true) {
  }

  public unsafe RouteContext(RouteContext routeContext) : this(BRMonitoringPINVOKE.new_RouteContext__SWIG_1(RouteContext.getCPtr(routeContext)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe RouteContext(EntityUID InFromID, EntityUID InToID) : this(BRMonitoringPINVOKE.new_RouteContext__SWIG_2(EntityUID.getCPtr(InFromID), EntityUID.getCPtr(InToID)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe RouteContext(int initValue) : this(BRMonitoringPINVOKE.new_RouteContext__SWIG_3(initValue), true) {
  }

  public unsafe EntityUID GetFrom() {
    EntityUID ret = new EntityUID(BRMonitoringPINVOKE.RouteContext_GetFrom(swigCPtr), true);
    return ret;
  }

  public unsafe EntityUID GetTo() {
    EntityUID ret = new EntityUID(BRMonitoringPINVOKE.RouteContext_GetTo(swigCPtr), true);
    return ret;
  }

  public unsafe RouteContext CopyFrom(RouteContext src) {
    RouteContext ret = new RouteContext(BRMonitoringPINVOKE.RouteContext_CopyFrom(swigCPtr, RouteContext.getCPtr(src)), false);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe bool EqualTo(RouteContext routeContext) {
    bool ret = BRMonitoringPINVOKE.RouteContext_EqualTo(swigCPtr, RouteContext.getCPtr(routeContext));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe RouteContext GetSwaped() {
    RouteContext ret = new RouteContext(BRMonitoringPINVOKE.RouteContext_GetSwaped(swigCPtr), true);
    return ret;
  }

}

}
