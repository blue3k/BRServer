//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class TransactionID : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TransactionID(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TransactionID obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe EntityID EntityID {
    set {
      BRMonitoringPINVOKE.TransactionID_EntityID_set(swigCPtr, EntityID.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BRMonitoringPINVOKE.TransactionID_EntityID_get(swigCPtr);
      EntityID ret = (cPtr == global::System.IntPtr.Zero) ? null : new EntityID(cPtr, false);
      return ret;
    } 
  }

  public unsafe uint TransID {
    set {
      BRMonitoringPINVOKE.TransactionID_TransID_set(swigCPtr, value);
    } 
    get {
      uint ret = BRMonitoringPINVOKE.TransactionID_TransID_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe ulong ID {
    set {
      BRMonitoringPINVOKE.TransactionID_ID_set(swigCPtr, value);
    } 
    get {
      ulong ret = BRMonitoringPINVOKE.TransactionID_ID_get(swigCPtr);
      return ret;
    } 
  }

  public unsafe TransactionID() : this(BRMonitoringPINVOKE.new_TransactionID__SWIG_0(), true) {
  }

  public unsafe TransactionID(TransactionID transID) : this(BRMonitoringPINVOKE.new_TransactionID__SWIG_1(TransactionID.getCPtr(transID)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe TransactionID(EntityID entityID, uint transID) : this(BRMonitoringPINVOKE.new_TransactionID__SWIG_2(EntityID.getCPtr(entityID), transID), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe TransactionID(ulong context) : this(BRMonitoringPINVOKE.new_TransactionID__SWIG_3(context), true) {
  }

  public unsafe bool IsValid() {
    bool ret = BRMonitoringPINVOKE.TransactionID_IsValid(swigCPtr);
    return ret;
  }

  public unsafe TransactionID CopyFrom(TransactionID transID) {
    TransactionID ret = new TransactionID(BRMonitoringPINVOKE.TransactionID_CopyFrom(swigCPtr, TransactionID.getCPtr(transID)), false);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe bool EqualTo(TransactionID src) {
    bool ret = BRMonitoringPINVOKE.TransactionID_EqualTo(swigCPtr, TransactionID.getCPtr(src));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
