//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class BRMonitoring {
  public unsafe static ClusterID Increase(ClusterID clusterID) {
    ClusterID ret = (ClusterID)BRMonitoringPINVOKE.Increase__SWIG_0((int)clusterID);
    return ret;
  }

  public unsafe static ClusterID Increase(SWIGTYPE_p_BR__ClusterID clusterID, int arg1) {
    ClusterID ret = (ClusterID)BRMonitoringPINVOKE.Increase__SWIG_1(SWIGTYPE_p_BR__ClusterID.getCPtr(clusterID), arg1);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe static int SequenceDifference(uint seq1, uint seq2) {
    int ret = BRMonitoringPINVOKE.SequenceDifference(seq1, seq2);
    return ret;
  }

  public unsafe static int InitializeNativeSystem(string serviceName, string modulePath, string logCfgPath) {
    int ret = BRMonitoringPINVOKE.InitializeNativeSystem(serviceName, modulePath, logCfgPath);
    return ret;
  }

  public unsafe static int TerminateNativeSystem() {
    int ret = BRMonitoringPINVOKE.TerminateNativeSystem();
    return ret;
  }

  public unsafe static ArrayPerformanceCounterInstancePtr CreatePerformanceCounterInstanceArray() {
		var result = BRMonitoringPINVOKE.CreatePerformanceCounterInstanceArray(); 
		return result == null ? null : new ArrayPerformanceCounterInstancePtr(result,true);
	}

  public unsafe static PerformanceCounterInstancePtr CreatePerformanceCounterInstance() {
		var result = BRMonitoringPINVOKE.CreatePerformanceCounterInstance(); 
		return result == null ? null : new PerformanceCounterInstancePtr(result,true);
	}

  public unsafe static readonly bool WINDOWS = BRMonitoringPINVOKE.WINDOWS_get();
  public unsafe static readonly int TRUE = BRMonitoringPINVOKE.TRUE_get();
  public unsafe static readonly int FALSE = BRMonitoringPINVOKE.FALSE_get();
  public unsafe static readonly int MAX_PATH = BRMonitoringPINVOKE.MAX_PATH_get();
  public unsafe static readonly int NET_SEQUENCE_BITS = BRMonitoringPINVOKE.NET_SEQUENCE_BITS_get();
  public unsafe static readonly int NET_SEQUENCE_MASK = BRMonitoringPINVOKE.NET_SEQUENCE_MASK_get();
  public unsafe static readonly int MAX_MESSAGE_SIZE = BRMonitoringPINVOKE.MAX_MESSAGE_SIZE_get();
  public unsafe static readonly int MAX_SUBFRAME_SIZE = BRMonitoringPINVOKE.MAX_SUBFRAME_SIZE_get();
  public unsafe static readonly int MSGTYPE_NONE = BRMonitoringPINVOKE.MSGTYPE_NONE_get();
  public unsafe static readonly int MSGTYPE_NETCONTROL = BRMonitoringPINVOKE.MSGTYPE_NETCONTROL_get();
  public unsafe static readonly int MSGTYPE_EVENT = BRMonitoringPINVOKE.MSGTYPE_EVENT_get();
  public unsafe static readonly int MSGTYPE_COMMAND = BRMonitoringPINVOKE.MSGTYPE_COMMAND_get();
  public unsafe static readonly int MSGTYPE_RESULT = BRMonitoringPINVOKE.MSGTYPE_RESULT_get();
  public unsafe static readonly int MSGTYPE_RELIABLE = BRMonitoringPINVOKE.MSGTYPE_RELIABLE_get();
  public unsafe static readonly int MSGTYPE_MOBILE = BRMonitoringPINVOKE.MSGTYPE_MOBILE_get();

}

}
