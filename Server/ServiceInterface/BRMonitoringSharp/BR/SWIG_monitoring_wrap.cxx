/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_BRMonitoring(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_BRMonitoring(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_BRMonitoring(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include "Common/typedefs.h"
#include "Common/BrBaseTypes.h"
#include "Common/BrCommonTypes.h"
#include "Common/BrGameTypes.h"
#include "Common/BrSvrTypes.h"
#include "Common/ArrayUtil.h"
#include "Common/PolicyID.h"
#include "Common/Message.h"
#include "Common/SharedObject.h"
#include "Common/SharedPointer.h"
#include "Net/NetDef.h"
#include "Net/NetPolicy.h"


#define SWIGWORDSIZE32
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 64) || (LONG_MAX != INT_MAX)
# error "SWIG wrapped code invalid in 64 bit architecture, regenerate code using -DSWIGWORDSIZE64"
#endif


#include <stdlib.h>


#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include "ServerSystem/PerformanceCounter/PerformanceCounter.h"
#include "ServerSystem/PerformanceCounter/PerformanceCounterInstance.h"
#include "ServerSystem/PerformanceCounter/PerformanceCounterServer.h"


#include "Protocol/Policy/MonitoringIPolicy.h"
#include "Protocol/Policy/MonitoringNetPolicy.h"


#include "Protocol/Policy/RankingIPolicy.h"
#include "Protocol/Policy/RankingNetPolicy.h"


#include "..\..\BRMonitoring\BRMonitoring.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WINDOWS_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)(true);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRUE_get() {
  int jresult ;
  int result;
  
  result = (int)((1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FALSE_get() {
  int jresult ;
  int result;
  
  result = (int)((0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_S_OK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_PATH_get() {
  int jresult ;
  int result;
  
  result = (int)(512);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetAddress_MAX_NETNAME_get() {
  int jresult ;
  int result;
  
  result = (int)BR::NetAddress::MAX_NETNAME;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetAddress_strAddr_set(void * jarg1, char * jarg2) {
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::NetAddress *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->strAddr, (const char *)arg2, BR::NetAddress::MAX_NETNAME-1);
      arg1->strAddr[BR::NetAddress::MAX_NETNAME-1] = 0;
    } else {
      arg1->strAddr[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetAddress_strAddr_get(void * jarg1) {
  char * jresult ;
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::NetAddress *)jarg1; 
  result = (char *)(char *) ((arg1)->strAddr);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetAddress_usPort_set(void * jarg1, unsigned short jarg2) {
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::NetAddress *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->usPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NetAddress_usPort_get(void * jarg1) {
  unsigned short jresult ;
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  UINT16 result;
  
  arg1 = (BR::NetAddress *)jarg1; 
  result = (UINT16) ((arg1)->usPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetAddress_SocketFamily_set(void * jarg1, int jarg2) {
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  BR::SockFamily arg2 ;
  
  arg1 = (BR::NetAddress *)jarg1; 
  arg2 = (BR::SockFamily)jarg2; 
  if (arg1) (arg1)->SocketFamily = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetAddress_SocketFamily_get(void * jarg1) {
  int jresult ;
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  BR::SockFamily result;
  
  arg1 = (BR::NetAddress *)jarg1; 
  result = (BR::SockFamily) ((arg1)->SocketFamily);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetAddress__SWIG_0() {
  void * jresult ;
  BR::NetAddress *result = 0 ;
  
  result = (BR::NetAddress *)new BR::NetAddress();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetAddress__SWIG_1(int jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  BR::SockFamily arg1 ;
  char *arg2 = (char *) 0 ;
  UINT16 arg3 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (BR::SockFamily)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (UINT16)jarg3; 
  result = (BR::NetAddress *)new BR::NetAddress(arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetAddress__SWIG_2(int jarg1, char * jarg2) {
  void * jresult ;
  BR::SockFamily arg1 ;
  char *arg2 = (char *) 0 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (BR::SockFamily)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BR::NetAddress *)new BR::NetAddress(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetAddress__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::NetAddress *)new BR::NetAddress(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetAddress_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::NetAddress *arg1 = (BR::NetAddress *) 0 ;
  BR::NetAddress *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::NetAddress *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::NetAddress const *)arg1)->operator ==((BR::NetAddress const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntityID_MAX_IDBIT_get() {
  int jresult ;
  int result;
  
  result = (int)BR::EntityID::MAX_IDBIT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityID_ID_set(void * jarg1, unsigned int jarg2) {
  BR::EntityID *arg1 = (BR::EntityID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::EntityID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityID_ID_get(void * jarg1) {
  unsigned int jresult ;
  BR::EntityID *arg1 = (BR::EntityID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::EntityID *)jarg1; 
  result = (UINT32) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityID__SWIG_0() {
  void * jresult ;
  BR::EntityID *result = 0 ;
  
  result = (BR::EntityID *)new BR::EntityID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityID__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::EntityUID *arg1 = 0 ;
  BR::EntityID *result = 0 ;
  
  arg1 = (BR::EntityUID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (BR::EntityID *)new BR::EntityID((BR::EntityUID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityID__SWIG_2(void * jarg1) {
  void * jresult ;
  BR::EntityID *arg1 = 0 ;
  BR::EntityID *result = 0 ;
  
  arg1 = (BR::EntityID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityID const & type is null", 0);
    return 0;
  } 
  result = (BR::EntityID *)new BR::EntityID((BR::EntityID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityID__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  UINT32 arg1 ;
  BR::EntityID *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  result = (BR::EntityID *)new BR::EntityID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityID_GetEntityLID(void * jarg1) {
  unsigned int jresult ;
  BR::EntityID *arg1 = (BR::EntityID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::EntityID *)jarg1; 
  result = (UINT32)((BR::EntityID const *)arg1)->GetEntityLID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityID_GetFacultyID(void * jarg1) {
  unsigned int jresult ;
  BR::EntityID *arg1 = (BR::EntityID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::EntityID *)jarg1; 
  result = (UINT32)((BR::EntityID const *)arg1)->GetFacultyID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityID_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::EntityID *arg1 = (BR::EntityID *) 0 ;
  BR::EntityID *arg2 = 0 ;
  BR::EntityID *result = 0 ;
  
  arg1 = (BR::EntityID *)jarg1; 
  arg2 = (BR::EntityID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityID const & type is null", 0);
    return 0;
  } 
  result = (BR::EntityID *) &(arg1)->operator =((BR::EntityID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityUID_UID_set(void * jarg1, unsigned long long jarg2) {
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::EntityUID *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->UID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_EntityUID_UID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  UINT64 result;
  
  arg1 = (BR::EntityUID *)jarg1; 
  result =  ((arg1)->UID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityUID__SWIG_0() {
  void * jresult ;
  BR::EntityUID *result = 0 ;
  
  result = (BR::EntityUID *)new BR::EntityUID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityUID__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::EntityUID *arg1 = 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::EntityUID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (BR::EntityUID *)new BR::EntityUID((BR::EntityUID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityUID__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::ServerID arg1 ;
  UINT32 arg2 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::ServerID)jarg1; 
  arg2 = (UINT32)jarg2; 
  result = (BR::EntityUID *)new BR::EntityUID(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityUID__SWIG_3(unsigned long long jarg1) {
  void * jresult ;
  BR::Context *arg1 = 0 ;
  BR::Context temp1 ;
  BR::EntityUID *result = 0 ;
  
  temp1 = (BR::Context)jarg1; 
  arg1 = &temp1; 
  result = (BR::EntityUID *)new BR::EntityUID((BR::Context const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityUID_GetEntityID(void * jarg1) {
  void * jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  BR::EntityID result;
  
  arg1 = (BR::EntityUID *)jarg1; 
  result = ((BR::EntityUID const *)arg1)->GetEntityID();
  jresult = new BR::EntityID((const BR::EntityID &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityUID_GetServerID(void * jarg1) {
  unsigned int jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  BR::ServerID result;
  
  arg1 = (BR::EntityUID *)jarg1; 
  result = (BR::ServerID)((BR::EntityUID const *)arg1)->GetServerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityUID_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::EntityUID *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (BR::EntityUID *) &(arg1)->operator =((BR::EntityUID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityUID_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::EntityUID *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::EntityUID const *)arg1)->operator ==((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityUID_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::EntityUID *arg1 = (BR::EntityUID *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::EntityUID *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::EntityUID const *)arg1)->operator !=((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerInformation_MAX_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)BR::PlayerInformation::MAX_NAME;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_PlayerID_set(void * jarg1, unsigned long long jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::AccountID arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (BR::AccountID)jarg2; 
  if (arg1) (arg1)->PlayerID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PlayerInformation_PlayerID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::AccountID result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result =  ((arg1)->PlayerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_FBUID_set(void * jarg1, unsigned long long jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::FacebookUID arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (BR::FacebookUID)jarg2; 
  if (arg1) (arg1)->FBUID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PlayerInformation_FBUID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::FacebookUID result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result =  ((arg1)->FBUID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_NickName_set(void * jarg1, char * jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->NickName, (const char *)arg2, BR::PlayerInformation::MAX_NAME-1);
      arg1->NickName[BR::PlayerInformation::MAX_NAME-1] = 0;
    } else {
      arg1->NickName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerInformation_NickName_get(void * jarg1) {
  char * jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result = (char *)(char *) ((arg1)->NickName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_LastActiveTime_set(void * jarg1, unsigned long long jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->LastActiveTime = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_PlayerInformation_LastActiveTime_get(void * jarg1) {
  unsigned long long jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT64 result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result =  ((arg1)->LastActiveTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_Level_set(void * jarg1, unsigned int jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerInformation_Level_get(void * jarg1) {
  unsigned int jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerInformation_IsPlayingGame_set(void * jarg1, unsigned int jarg2) {
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->IsPlayingGame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerInformation_IsPlayingGame_get(void * jarg1) {
  unsigned int jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->IsPlayingGame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerInformation__SWIG_0() {
  void * jresult ;
  BR::PlayerInformation *result = 0 ;
  
  result = (BR::PlayerInformation *)new BR::PlayerInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::PlayerInformation *arg1 = 0 ;
  BR::PlayerInformation *result = 0 ;
  
  arg1 = (BR::PlayerInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::PlayerInformation *)new BR::PlayerInformation((BR::PlayerInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerInformation__SWIG_2(unsigned long long jarg1, unsigned long long jarg2, char * jarg3, unsigned int jarg4, unsigned char jarg5, unsigned long long jarg6) {
  void * jresult ;
  BR::AccountID arg1 ;
  BR::FacebookUID arg2 ;
  char *arg3 = (char *) 0 ;
  UINT arg4 ;
  BYTE arg5 ;
  UINT64 arg6 ;
  BR::PlayerInformation *result = 0 ;
  
  arg1 = (BR::AccountID)jarg1; 
  arg2 = (BR::FacebookUID)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (BYTE)jarg5; 
  arg6 = (UINT64)jarg6; 
  result = (BR::PlayerInformation *)new BR::PlayerInformation(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PlayerInformation_InitPlayerInformation(void * jarg1, unsigned long long jarg2, unsigned long long jarg3, char * jarg4, unsigned int jarg5, unsigned char jarg6, unsigned long long jarg7) {
  long jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::AccountID arg2 ;
  BR::FacebookUID arg3 ;
  char *arg4 = (char *) 0 ;
  UINT arg5 ;
  BYTE arg6 ;
  UINT64 arg7 ;
  HRESULT result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (BR::AccountID)jarg2; 
  arg3 = (BR::FacebookUID)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (UINT)jarg5; 
  arg6 = (BYTE)jarg6; 
  arg7 = (UINT64)jarg7; 
  result = (HRESULT)(arg1)->InitPlayerInformation(arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::PlayerInformation *arg2 = 0 ;
  BR::PlayerInformation *result = 0 ;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (BR::PlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::PlayerInformation *) &(arg1)->operator =((BR::PlayerInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::PlayerInformation *arg1 = (BR::PlayerInformation *) 0 ;
  BR::PlayerInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::PlayerInformation *)jarg1; 
  arg2 = (BR::PlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::PlayerInformation const *)arg1)->operator ==((BR::PlayerInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RankingPlayerInformation_WeeklyWin_set(void * jarg1, unsigned int jarg2) {
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->WeeklyWin = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RankingPlayerInformation_WeeklyWin_get(void * jarg1) {
  unsigned int jresult ;
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->WeeklyWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RankingPlayerInformation_WeeklyLose_set(void * jarg1, unsigned int jarg2) {
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->WeeklyLose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RankingPlayerInformation_WeeklyLose_get(void * jarg1) {
  unsigned int jresult ;
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->WeeklyLose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RankingPlayerInformation__SWIG_0() {
  void * jresult ;
  BR::RankingPlayerInformation *result = 0 ;
  
  result = (BR::RankingPlayerInformation *)new BR::RankingPlayerInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RankingPlayerInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::RankingPlayerInformation *arg1 = 0 ;
  BR::RankingPlayerInformation *result = 0 ;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::RankingPlayerInformation *)new BR::RankingPlayerInformation((BR::RankingPlayerInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RankingPlayerInformation__SWIG_2(unsigned long long jarg1, unsigned long long jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned char jarg7, unsigned long long jarg8) {
  void * jresult ;
  BR::AccountID arg1 ;
  BR::FacebookUID arg2 ;
  char *arg3 = (char *) 0 ;
  UINT arg4 ;
  UINT arg5 ;
  UINT arg6 ;
  BYTE arg7 ;
  UINT64 arg8 ;
  BR::RankingPlayerInformation *result = 0 ;
  
  arg1 = (BR::AccountID)jarg1; 
  arg2 = (BR::FacebookUID)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (UINT)jarg5; 
  arg6 = (UINT)jarg6; 
  arg7 = (BYTE)jarg7; 
  arg8 = (UINT64)jarg8; 
  result = (BR::RankingPlayerInformation *)new BR::RankingPlayerInformation(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RankingPlayerInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  BR::RankingPlayerInformation *arg2 = 0 ;
  BR::RankingPlayerInformation *result = 0 ;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  arg2 = (BR::RankingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::RankingPlayerInformation *) &(arg1)->operator =((BR::RankingPlayerInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RankingPlayerInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::RankingPlayerInformation *arg1 = (BR::RankingPlayerInformation *) 0 ;
  BR::RankingPlayerInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::RankingPlayerInformation *)jarg1; 
  arg2 = (BR::RankingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::RankingPlayerInformation const *)arg1)->operator ==((BR::RankingPlayerInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FriendInformation_LastStaminaSent_set(void * jarg1, unsigned long long jarg2) {
  BR::FriendInformation *arg1 = (BR::FriendInformation *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::FriendInformation *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->LastStaminaSent = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_FriendInformation_LastStaminaSent_get(void * jarg1) {
  unsigned long long jresult ;
  BR::FriendInformation *arg1 = (BR::FriendInformation *) 0 ;
  UINT64 result;
  
  arg1 = (BR::FriendInformation *)jarg1; 
  result =  ((arg1)->LastStaminaSent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FriendInformation__SWIG_0() {
  void * jresult ;
  BR::FriendInformation *result = 0 ;
  
  result = (BR::FriendInformation *)new BR::FriendInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FriendInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::FriendInformation *arg1 = 0 ;
  BR::FriendInformation *result = 0 ;
  
  arg1 = (BR::FriendInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::FriendInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::FriendInformation *)new BR::FriendInformation((BR::FriendInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FriendInformation__SWIG_2(unsigned long long jarg1, unsigned long long jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned char jarg7, unsigned long long jarg8, unsigned long long jarg9) {
  void * jresult ;
  BR::AccountID arg1 ;
  BR::FacebookUID arg2 ;
  char *arg3 = (char *) 0 ;
  UINT arg4 ;
  UINT arg5 ;
  UINT arg6 ;
  BYTE arg7 ;
  UINT64 arg8 ;
  UINT64 arg9 ;
  BR::FriendInformation *result = 0 ;
  
  arg1 = (BR::AccountID)jarg1; 
  arg2 = (BR::FacebookUID)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (UINT)jarg5; 
  arg6 = (UINT)jarg6; 
  arg7 = (BYTE)jarg7; 
  arg8 = (UINT64)jarg8; 
  arg9 = (UINT64)jarg9; 
  result = (BR::FriendInformation *)new BR::FriendInformation(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FriendInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::FriendInformation *arg1 = (BR::FriendInformation *) 0 ;
  BR::FriendInformation *arg2 = 0 ;
  BR::FriendInformation *result = 0 ;
  
  arg1 = (BR::FriendInformation *)jarg1; 
  arg2 = (BR::FriendInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::FriendInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::FriendInformation *) &(arg1)->operator =((BR::FriendInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FriendInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::FriendInformation *arg1 = (BR::FriendInformation *) 0 ;
  BR::FriendInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::FriendInformation *)jarg1; 
  arg2 = (BR::FriendInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::FriendInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::FriendInformation const *)arg1)->operator ==((BR::FriendInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServerFriendInformation_ShardID_set(void * jarg1, int jarg2) {
  BR::ServerFriendInformation *arg1 = (BR::ServerFriendInformation *) 0 ;
  INT arg2 ;
  
  arg1 = (BR::ServerFriendInformation *)jarg1; 
  arg2 = (INT)jarg2; 
  if (arg1) (arg1)->ShardID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ServerFriendInformation_ShardID_get(void * jarg1) {
  int jresult ;
  BR::ServerFriendInformation *arg1 = (BR::ServerFriendInformation *) 0 ;
  INT result;
  
  arg1 = (BR::ServerFriendInformation *)jarg1; 
  result = (INT) ((arg1)->ShardID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServerFriendInformation__SWIG_0() {
  void * jresult ;
  BR::ServerFriendInformation *result = 0 ;
  
  result = (BR::ServerFriendInformation *)new BR::ServerFriendInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServerFriendInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::ServerFriendInformation *arg1 = 0 ;
  BR::ServerFriendInformation *result = 0 ;
  
  arg1 = (BR::ServerFriendInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServerFriendInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::ServerFriendInformation *)new BR::ServerFriendInformation((BR::ServerFriendInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServerFriendInformation__SWIG_2(unsigned long long jarg1, int jarg2, unsigned long long jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned char jarg8, unsigned long long jarg9, unsigned long long jarg10) {
  void * jresult ;
  BR::AccountID arg1 ;
  INT arg2 ;
  BR::FacebookUID arg3 ;
  char *arg4 = (char *) 0 ;
  UINT arg5 ;
  UINT arg6 ;
  UINT arg7 ;
  BYTE arg8 ;
  UINT64 arg9 ;
  UINT64 arg10 ;
  BR::ServerFriendInformation *result = 0 ;
  
  arg1 = (BR::AccountID)jarg1; 
  arg2 = (INT)jarg2; 
  arg3 = (BR::FacebookUID)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (UINT)jarg5; 
  arg6 = (UINT)jarg6; 
  arg7 = (UINT)jarg7; 
  arg8 = (BYTE)jarg8; 
  arg9 = (UINT64)jarg9; 
  arg10 = (UINT64)jarg10; 
  result = (BR::ServerFriendInformation *)new BR::ServerFriendInformation(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServerFriendInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::ServerFriendInformation *arg1 = (BR::ServerFriendInformation *) 0 ;
  BR::ServerFriendInformation *arg2 = 0 ;
  BR::ServerFriendInformation *result = 0 ;
  
  arg1 = (BR::ServerFriendInformation *)jarg1; 
  arg2 = (BR::ServerFriendInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServerFriendInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::ServerFriendInformation *) &(arg1)->operator =((BR::ServerFriendInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServerFriendInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::ServerFriendInformation *arg1 = (BR::ServerFriendInformation *) 0 ;
  BR::ServerFriendInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::ServerFriendInformation *)jarg1; 
  arg2 = (BR::ServerFriendInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServerFriendInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::ServerFriendInformation const *)arg1)->operator ==((BR::ServerFriendInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_MAX_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)BR::TotalRankingPlayerInformation::MAX_NAME;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_RankingID_set(void * jarg1, unsigned int jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->RankingID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_RankingID_get(void * jarg1) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->RankingID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Ranking_set(void * jarg1, unsigned int jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Ranking = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Ranking_get(void * jarg1) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->Ranking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_PlayerID_set(void * jarg1, unsigned long long jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::AccountID arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (BR::AccountID)jarg2; 
  if (arg1) (arg1)->PlayerID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TotalRankingPlayerInformation_PlayerID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::AccountID result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result =  ((arg1)->PlayerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_FBUID_set(void * jarg1, unsigned long long jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::FacebookUID arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (BR::FacebookUID)jarg2; 
  if (arg1) (arg1)->FBUID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TotalRankingPlayerInformation_FBUID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::FacebookUID result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result =  ((arg1)->FBUID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_NickName_set(void * jarg1, char * jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->NickName, (const char *)arg2, BR::TotalRankingPlayerInformation::MAX_NAME-1);
      arg1->NickName[BR::TotalRankingPlayerInformation::MAX_NAME-1] = 0;
    } else {
      arg1->NickName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TotalRankingPlayerInformation_NickName_get(void * jarg1) {
  char * jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (char *)(char *) ((arg1)->NickName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Level_set(void * jarg1, unsigned int jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Level_get(void * jarg1) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Win_set(void * jarg1, unsigned int jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Win = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Win_get(void * jarg1) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->Win);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Lose_set(void * jarg1, unsigned int jarg2) {
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Lose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_Lose_get(void * jarg1) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  result = (UINT32) ((arg1)->Lose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TotalRankingPlayerInformation__SWIG_0() {
  void * jresult ;
  BR::TotalRankingPlayerInformation *result = 0 ;
  
  result = (BR::TotalRankingPlayerInformation *)new BR::TotalRankingPlayerInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TotalRankingPlayerInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::TotalRankingPlayerInformation *arg1 = 0 ;
  BR::TotalRankingPlayerInformation *result = 0 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TotalRankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::TotalRankingPlayerInformation *)new BR::TotalRankingPlayerInformation((BR::TotalRankingPlayerInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TotalRankingPlayerInformation__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  UINT32 arg1 ;
  UINT32 arg2 ;
  BR::AccountID arg3 ;
  BR::FacebookUID arg4 ;
  char *arg5 = (char *) 0 ;
  UINT arg6 ;
  UINT arg7 ;
  UINT arg8 ;
  BR::TotalRankingPlayerInformation *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  arg2 = (UINT32)jarg2; 
  arg3 = (BR::AccountID)jarg3; 
  arg4 = (BR::FacebookUID)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (UINT)jarg6; 
  arg7 = (UINT)jarg7; 
  arg8 = (UINT)jarg8; 
  result = (BR::TotalRankingPlayerInformation *)new BR::TotalRankingPlayerInformation(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TotalRankingPlayerInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::TotalRankingPlayerInformation *arg2 = 0 ;
  BR::TotalRankingPlayerInformation *result = 0 ;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (BR::TotalRankingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TotalRankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::TotalRankingPlayerInformation *) &(arg1)->operator =((BR::TotalRankingPlayerInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TotalRankingPlayerInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::TotalRankingPlayerInformation *arg1 = (BR::TotalRankingPlayerInformation *) 0 ;
  BR::TotalRankingPlayerInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::TotalRankingPlayerInformation *)jarg1; 
  arg2 = (BR::TotalRankingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TotalRankingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::TotalRankingPlayerInformation const *)arg1)->operator ==((BR::TotalRankingPlayerInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogItem_LogType_set(void * jarg1, int jarg2) {
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  BR::GameLogType arg2 ;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  arg2 = (BR::GameLogType)jarg2; 
  if (arg1) (arg1)->LogType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogItem_LogType_get(void * jarg1) {
  int jresult ;
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  BR::GameLogType result;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  result = (BR::GameLogType) ((arg1)->LogType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogItem_LogItemSize_set(void * jarg1, unsigned short jarg2) {
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->LogItemSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_GameLogItem_LogItemSize_get(void * jarg1) {
  unsigned short jresult ;
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  UINT16 result;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  result = (UINT16) ((arg1)->LogItemSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogItem_TimeStamp_set(void * jarg1, void * jarg2) {
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  TimeStampSec arg2 ;
  TimeStampSec *argp2 ;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  argp2 = (TimeStampSec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeStamp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLogItem_TimeStamp_get(void * jarg1) {
  void * jresult ;
  BR::GameLogItem *arg1 = (BR::GameLogItem *) 0 ;
  TimeStampSec result;
  
  arg1 = (BR::GameLogItem *)jarg1; 
  result =  ((arg1)->TimeStamp);
  jresult = new TimeStampSec((const TimeStampSec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogItem(int jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  BR::GameLogType arg1 ;
  TimeStampSec arg2 ;
  size_t arg3 ;
  TimeStampSec *argp2 ;
  BR::GameLogItem *result = 0 ;
  
  arg1 = (BR::GameLogType)jarg1; 
  argp2 = (TimeStampSec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = (BR::GameLogItem *)new BR::GameLogItem(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogChatMessage_Player_set(void * jarg1, unsigned long long jarg2) {
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BR::PlayerID arg2 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  if (arg1) (arg1)->Player = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GameLogChatMessage_Player_get(void * jarg1) {
  unsigned long long jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BR::PlayerID result;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  result =  ((arg1)->Player);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogChatMessage_PlayerStatus_set(void * jarg1, unsigned char jarg2) {
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BYTE arg2 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->PlayerStatus = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GameLogChatMessage_PlayerStatus_get(void * jarg1) {
  unsigned char jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BYTE result;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  result = (BYTE) ((arg1)->PlayerStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogChatMessage_MessageType_set(void * jarg1, int jarg2) {
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BR::ChatType arg2 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (BR::ChatType)jarg2; 
  if (arg1) (arg1)->MessageType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogChatMessage_MessageType_get(void * jarg1) {
  int jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BR::ChatType result;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  result = (BR::ChatType) ((arg1)->MessageType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogChatMessage_MessageBufferSize_set(void * jarg1, unsigned short jarg2) {
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->MessageBufferSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_GameLogChatMessage_MessageBufferSize_get(void * jarg1) {
  unsigned short jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  UINT16 result;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  result = (UINT16) ((arg1)->MessageBufferSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogChatMessage_MessageText_set(void * jarg1, char * jarg2) {
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MessageText, (const char *)arg2, 1-1);
      arg1->MessageText[1-1] = 0;
    } else {
      arg1->MessageText[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameLogChatMessage_MessageText_get(void * jarg1) {
  char * jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  result = (char *)(char *) ((arg1)->MessageText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogChatMessage(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TimeStampSec arg1 ;
  UINT arg2 ;
  TimeStampSec *argp1 ;
  BR::GameLogChatMessage *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (UINT)jarg2; 
  result = (BR::GameLogChatMessage *)new BR::GameLogChatMessage(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GameLogChatMessage_SetChatMessage(void * jarg1, unsigned long long jarg2, unsigned char jarg3, int jarg4, char * jarg5) {
  long jresult ;
  BR::GameLogChatMessage *arg1 = (BR::GameLogChatMessage *) 0 ;
  BR::PlayerID arg2 ;
  BYTE arg3 ;
  BR::ChatType arg4 ;
  char *arg5 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (BR::GameLogChatMessage *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  arg3 = (BYTE)jarg3; 
  arg4 = (BR::ChatType)jarg4; 
  arg5 = (char *)jarg5; 
  result = (HRESULT)(arg1)->SetChatMessage(arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogGameStateChange_GameState_set(void * jarg1, int jarg2) {
  BR::GameLogGameStateChange *arg1 = (BR::GameLogGameStateChange *) 0 ;
  BR::GameStateID arg2 ;
  
  arg1 = (BR::GameLogGameStateChange *)jarg1; 
  arg2 = (BR::GameStateID)jarg2; 
  if (arg1) (arg1)->GameState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogGameStateChange_GameState_get(void * jarg1) {
  int jresult ;
  BR::GameLogGameStateChange *arg1 = (BR::GameLogGameStateChange *) 0 ;
  BR::GameStateID result;
  
  arg1 = (BR::GameLogGameStateChange *)jarg1; 
  result = (BR::GameStateID) ((arg1)->GameState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogGameStateChange(void * jarg1) {
  void * jresult ;
  TimeStampSec arg1 ;
  TimeStampSec *argp1 ;
  BR::GameLogGameStateChange *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BR::GameLogGameStateChange *)new BR::GameLogGameStateChange(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogGameStateChange_SetState(void * jarg1, int jarg2) {
  BR::GameLogGameStateChange *arg1 = (BR::GameLogGameStateChange *) 0 ;
  BR::GameStateID arg2 ;
  
  arg1 = (BR::GameLogGameStateChange *)jarg1; 
  arg2 = (BR::GameStateID)jarg2; 
  (arg1)->SetState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVote_Type_set(void * jarg1, int jarg2) {
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::GameVoteType arg2 ;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  arg2 = (BR::GameVoteType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogVote_Type_get(void * jarg1) {
  int jresult ;
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::GameVoteType result;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  result = (BR::GameVoteType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVote_NumberOfVoter_set(void * jarg1, unsigned short jarg2) {
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->NumberOfVoter = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_GameLogVote_NumberOfVoter_get(void * jarg1) {
  unsigned short jresult ;
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  UINT16 result;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  result = (UINT16) ((arg1)->NumberOfVoter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVote_VoteInfo_Voter_set(void * jarg1, unsigned long long jarg2) {
  BR::GameLogVote::VoteInfo *arg1 = (BR::GameLogVote::VoteInfo *) 0 ;
  BR::PlayerID arg2 ;
  
  arg1 = (BR::GameLogVote::VoteInfo *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  if (arg1) (arg1)->Voter = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GameLogVote_VoteInfo_Voter_get(void * jarg1) {
  unsigned long long jresult ;
  BR::GameLogVote::VoteInfo *arg1 = (BR::GameLogVote::VoteInfo *) 0 ;
  BR::PlayerID result;
  
  arg1 = (BR::GameLogVote::VoteInfo *)jarg1; 
  result =  ((arg1)->Voter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVote_VoteInfo_Voted_set(void * jarg1, unsigned long long jarg2) {
  BR::GameLogVote::VoteInfo *arg1 = (BR::GameLogVote::VoteInfo *) 0 ;
  BR::PlayerID arg2 ;
  
  arg1 = (BR::GameLogVote::VoteInfo *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  if (arg1) (arg1)->Voted = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GameLogVote_VoteInfo_Voted_get(void * jarg1) {
  unsigned long long jresult ;
  BR::GameLogVote::VoteInfo *arg1 = (BR::GameLogVote::VoteInfo *) 0 ;
  BR::PlayerID result;
  
  arg1 = (BR::GameLogVote::VoteInfo *)jarg1; 
  result =  ((arg1)->Voted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVote_VoteStatus_set(void * jarg1, void * jarg2) {
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::GameLogVote::VoteInfo *arg2 ;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  arg2 = (BR::GameLogVote::VoteInfo *)jarg2; 
  {
    size_t ii;
    BR::GameLogVote::VoteInfo *b = (BR::GameLogVote::VoteInfo *) arg1->VoteStatus;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((BR::GameLogVote::VoteInfo *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLogVote_VoteStatus_get(void * jarg1) {
  void * jresult ;
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::GameLogVote::VoteInfo *result = 0 ;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  result = (BR::GameLogVote::VoteInfo *)(BR::GameLogVote::VoteInfo *) ((arg1)->VoteStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogVote(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TimeStampSec arg1 ;
  UINT arg2 ;
  TimeStampSec *argp1 ;
  BR::GameLogVote *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (UINT)jarg2; 
  result = (BR::GameLogVote *)new BR::GameLogVote(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GameLogVote_InitializeVote(void * jarg1, int jarg2, int jarg3) {
  long jresult ;
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::GameVoteType arg2 ;
  int arg3 ;
  HRESULT result;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  arg2 = (BR::GameVoteType)jarg2; 
  arg3 = (int)jarg3; 
  result = (HRESULT)(arg1)->InitializeVote(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GameLogVote_SetVoteStatus(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  long jresult ;
  BR::GameLogVote *arg1 = (BR::GameLogVote *) 0 ;
  BR::PlayerID arg2 ;
  BR::PlayerID arg3 ;
  HRESULT result;
  
  arg1 = (BR::GameLogVote *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  arg3 = (BR::PlayerID)jarg3; 
  result = (HRESULT)(arg1)->SetVoteStatus(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVoteResult_NumberOfRanker_set(void * jarg1, unsigned int jarg2) {
  BR::GameLogVoteResult *arg1 = (BR::GameLogVoteResult *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::GameLogVoteResult *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->NumberOfRanker = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameLogVoteResult_NumberOfRanker_get(void * jarg1) {
  unsigned int jresult ;
  BR::GameLogVoteResult *arg1 = (BR::GameLogVoteResult *) 0 ;
  UINT32 result;
  
  arg1 = (BR::GameLogVoteResult *)jarg1; 
  result = (UINT32) ((arg1)->NumberOfRanker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVoteResult_VotedRankers_set(void * jarg1, void * jarg2) {
  BR::GameLogVoteResult *arg1 = (BR::GameLogVoteResult *) 0 ;
  BR::PlayerID *arg2 ;
  
  arg1 = (BR::GameLogVoteResult *)jarg1; 
  arg2 = (BR::PlayerID *)jarg2; 
  {
    size_t ii;
    BR::PlayerID *b = (BR::PlayerID *) arg1->VotedRankers;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((BR::PlayerID *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLogVoteResult_VotedRankers_get(void * jarg1) {
  void * jresult ;
  BR::GameLogVoteResult *arg1 = (BR::GameLogVoteResult *) 0 ;
  BR::PlayerID *result = 0 ;
  
  arg1 = (BR::GameLogVoteResult *)jarg1; 
  result = (BR::PlayerID *)(BR::PlayerID *) ((arg1)->VotedRankers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogVoteResult(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TimeStampSec arg1 ;
  UINT arg2 ;
  TimeStampSec *argp1 ;
  BR::GameLogVoteResult *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (UINT)jarg2; 
  result = (BR::GameLogVoteResult *)new BR::GameLogVoteResult(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogVoteResult_SetVotedRankers(void * jarg1, unsigned int jarg2, void * jarg3) {
  BR::GameLogVoteResult *arg1 = (BR::GameLogVoteResult *) 0 ;
  UINT arg2 ;
  BR::PlayerID *arg3 = (BR::PlayerID *) 0 ;
  
  arg1 = (BR::GameLogVoteResult *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (BR::PlayerID *)jarg3; 
  (arg1)->SetVotedRankers(arg2,(BR::PlayerID const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogPlayerKilled_KilledPlayerID_set(void * jarg1, unsigned long long jarg2) {
  BR::GameLogPlayerKilled *arg1 = (BR::GameLogPlayerKilled *) 0 ;
  BR::PlayerID arg2 ;
  
  arg1 = (BR::GameLogPlayerKilled *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  if (arg1) (arg1)->KilledPlayerID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GameLogPlayerKilled_KilledPlayerID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::GameLogPlayerKilled *arg1 = (BR::GameLogPlayerKilled *) 0 ;
  BR::PlayerID result;
  
  arg1 = (BR::GameLogPlayerKilled *)jarg1; 
  result =  ((arg1)->KilledPlayerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogPlayerKilled_killedReason_set(void * jarg1, int jarg2) {
  BR::GameLogPlayerKilled *arg1 = (BR::GameLogPlayerKilled *) 0 ;
  BR::PlayerKilledReason arg2 ;
  
  arg1 = (BR::GameLogPlayerKilled *)jarg1; 
  arg2 = (BR::PlayerKilledReason)jarg2; 
  if (arg1) (arg1)->killedReason = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogPlayerKilled_killedReason_get(void * jarg1) {
  int jresult ;
  BR::GameLogPlayerKilled *arg1 = (BR::GameLogPlayerKilled *) 0 ;
  BR::PlayerKilledReason result;
  
  arg1 = (BR::GameLogPlayerKilled *)jarg1; 
  result = (BR::PlayerKilledReason) ((arg1)->killedReason);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogPlayerKilled(void * jarg1) {
  void * jresult ;
  TimeStampSec arg1 ;
  TimeStampSec *argp1 ;
  BR::GameLogPlayerKilled *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BR::GameLogPlayerKilled *)new BR::GameLogPlayerKilled(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogPlayerKilled_SetPlayerKilled(void * jarg1, int jarg2, unsigned long long jarg3) {
  BR::GameLogPlayerKilled *arg1 = (BR::GameLogPlayerKilled *) 0 ;
  BR::PlayerKilledReason arg2 ;
  BR::PlayerID arg3 ;
  
  arg1 = (BR::GameLogPlayerKilled *)jarg1; 
  arg2 = (BR::PlayerKilledReason)jarg2; 
  arg3 = (BR::PlayerID)jarg3; 
  (arg1)->SetPlayerKilled(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogGameEnd_Winner_set(void * jarg1, int jarg2) {
  BR::GameLogGameEnd *arg1 = (BR::GameLogGameEnd *) 0 ;
  BR::GameWinner arg2 ;
  
  arg1 = (BR::GameLogGameEnd *)jarg1; 
  arg2 = (BR::GameWinner)jarg2; 
  if (arg1) (arg1)->Winner = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLogGameEnd_Winner_get(void * jarg1) {
  int jresult ;
  BR::GameLogGameEnd *arg1 = (BR::GameLogGameEnd *) 0 ;
  BR::GameWinner result;
  
  arg1 = (BR::GameLogGameEnd *)jarg1; 
  result = (BR::GameWinner) ((arg1)->Winner);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameLogGameEnd(void * jarg1) {
  void * jresult ;
  TimeStampSec arg1 ;
  TimeStampSec *argp1 ;
  BR::GameLogGameEnd *result = 0 ;
  
  argp1 = (TimeStampSec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BR::GameLogGameEnd *)new BR::GameLogGameEnd(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLogGameEnd_SetWinner(void * jarg1, int jarg2) {
  BR::GameLogGameEnd *arg1 = (BR::GameLogGameEnd *) 0 ;
  BR::GameWinner arg2 ;
  
  arg1 = (BR::GameLogGameEnd *)jarg1; 
  arg2 = (BR::GameWinner)jarg2; 
  (arg1)->SetWinner(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Increase__SWIG_0(int jarg1) {
  int jresult ;
  BR::ClusterID arg1 ;
  BR::ClusterID result;
  
  arg1 = (BR::ClusterID)jarg1; 
  result = (BR::ClusterID)BR::operator ++(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Increase__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  BR::ClusterID *arg1 = 0 ;
  int arg2 ;
  BR::ClusterID result;
  
  arg1 = (BR::ClusterID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ClusterID & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (BR::ClusterID)BR::operator ++(*arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransactionID_ID_set(void * jarg1, unsigned long long jarg2) {
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::TransactionID *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TransactionID_ID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  UINT64 result;
  
  arg1 = (BR::TransactionID *)jarg1; 
  result =  ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransactionID__SWIG_0() {
  void * jresult ;
  BR::TransactionID *result = 0 ;
  
  result = (BR::TransactionID *)new BR::TransactionID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransactionID__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::TransactionID *arg1 = 0 ;
  BR::TransactionID *result = 0 ;
  
  arg1 = (BR::TransactionID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TransactionID const & type is null", 0);
    return 0;
  } 
  result = (BR::TransactionID *)new BR::TransactionID((BR::TransactionID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransactionID__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::EntityID arg1 ;
  UINT32 arg2 ;
  BR::EntityID *argp1 ;
  BR::TransactionID *result = 0 ;
  
  argp1 = (BR::EntityID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityID", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (UINT32)jarg2; 
  result = (BR::TransactionID *)new BR::TransactionID(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransactionID__SWIG_3(unsigned long long jarg1) {
  void * jresult ;
  BR::Context arg1 ;
  BR::TransactionID *result = 0 ;
  
  arg1 = (BR::Context)jarg1; 
  result = (BR::TransactionID *)new BR::TransactionID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransactionID_IsValid(void * jarg1) {
  unsigned int jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  bool result;
  
  arg1 = (BR::TransactionID *)jarg1; 
  result = (bool)((BR::TransactionID const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransactionID_GetEntityID(void * jarg1) {
  void * jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  BR::EntityID result;
  
  arg1 = (BR::TransactionID *)jarg1; 
  result = ((BR::TransactionID const *)arg1)->GetEntityID();
  jresult = new BR::EntityID((const BR::EntityID &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransactionID_GetTransactionIndex(void * jarg1) {
  unsigned int jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::TransactionID *)jarg1; 
  result = (UINT32)((BR::TransactionID const *)arg1)->GetTransactionIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransactionID_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  BR::TransactionID *arg2 = 0 ;
  BR::TransactionID *result = 0 ;
  
  arg1 = (BR::TransactionID *)jarg1; 
  arg2 = (BR::TransactionID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TransactionID const & type is null", 0);
    return 0;
  } 
  result = (BR::TransactionID *) &(arg1)->operator =((BR::TransactionID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransactionID_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::TransactionID *arg1 = (BR::TransactionID *) 0 ;
  BR::TransactionID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::TransactionID *)jarg1; 
  arg2 = (BR::TransactionID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::TransactionID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::TransactionID const *)arg1)->operator ==((BR::TransactionID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RouteContext_ContextValue_set(void * jarg1, void * jarg2) {
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  UINT64 *arg2 ;
  
  arg1 = (BR::RouteContext *)jarg1; 
  arg2 = (UINT64 *)jarg2; 
  {
    size_t ii;
    UINT64 *b = (UINT64 *) arg1->ContextValue;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((UINT64 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RouteContext_ContextValue_get(void * jarg1) {
  void * jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  UINT64 *result = 0 ;
  
  arg1 = (BR::RouteContext *)jarg1; 
  result = (UINT64 *)(UINT64 *) ((arg1)->ContextValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RouteContext__SWIG_0() {
  void * jresult ;
  BR::RouteContext *result = 0 ;
  
  result = (BR::RouteContext *)new BR::RouteContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RouteContext__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::RouteContext *arg1 = 0 ;
  BR::RouteContext *result = 0 ;
  
  arg1 = (BR::RouteContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  result = (BR::RouteContext *)new BR::RouteContext((BR::RouteContext const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RouteContext__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::EntityUID arg1 ;
  BR::EntityUID arg2 ;
  BR::EntityUID *argp1 ;
  BR::EntityUID *argp2 ;
  BR::RouteContext *result = 0 ;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BR::EntityUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (BR::RouteContext *)new BR::RouteContext(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RouteContext__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::RouteContext *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::RouteContext *)new BR::RouteContext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RouteContext_GetFrom(void * jarg1) {
  void * jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  BR::EntityUID result;
  
  arg1 = (BR::RouteContext *)jarg1; 
  result = ((BR::RouteContext const *)arg1)->GetFrom();
  jresult = new BR::EntityUID((const BR::EntityUID &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RouteContext_GetTo(void * jarg1) {
  void * jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  BR::EntityUID result;
  
  arg1 = (BR::RouteContext *)jarg1; 
  result = ((BR::RouteContext const *)arg1)->GetTo();
  jresult = new BR::EntityUID((const BR::EntityUID &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RouteContext_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  BR::RouteContext *arg2 = 0 ;
  BR::RouteContext *result = 0 ;
  
  arg1 = (BR::RouteContext *)jarg1; 
  arg2 = (BR::RouteContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  result = (BR::RouteContext *) &(arg1)->operator =((BR::RouteContext const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RouteContext_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  BR::RouteContext *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::RouteContext *)jarg1; 
  arg2 = (BR::RouteContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::RouteContext const *)arg1)->operator ==((BR::RouteContext const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RouteContext_GetSwaped(void * jarg1) {
  void * jresult ;
  BR::RouteContext *arg1 = (BR::RouteContext *) 0 ;
  BR::RouteContext result;
  
  arg1 = (BR::RouteContext *)jarg1; 
  result = ((BR::RouteContext const *)arg1)->GetSwaped();
  jresult = new BR::RouteContext((const BR::RouteContext &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_UID_set(void * jarg1, void * jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::EntityUID *arg2 = (BR::EntityUID *) 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2; 
  if (arg1) (arg1)->UID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceInformation_UID_get(void * jarg1) {
  void * jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (BR::EntityUID *)& ((arg1)->UID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_Membership_set(void * jarg1, int jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ClusterMembership arg2 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::ClusterMembership)jarg2; 
  if (arg1) (arg1)->Membership = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ServiceInformation_Membership_get(void * jarg1) {
  int jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ClusterMembership result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (BR::ClusterMembership) ((arg1)->Membership);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_Status_set(void * jarg1, int jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ServiceStatus arg2 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::ServiceStatus)jarg2; 
  if (arg1) (arg1)->Status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ServiceInformation_Status_get(void * jarg1) {
  int jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ServiceStatus result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (BR::ServiceStatus) ((arg1)->Status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_ServerClass_set(void * jarg1, int jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::NetClass arg2 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  if (arg1) (arg1)->ServerClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ServiceInformation_ServerClass_get(void * jarg1) {
  int jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::NetClass result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (BR::NetClass) ((arg1)->ServerClass);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_ServerAddress_set(void * jarg1, void * jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::NetAddress *arg2 = (BR::NetAddress *) 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2; 
  if (arg1) (arg1)->ServerAddress = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceInformation_ServerAddress_get(void * jarg1) {
  void * jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (BR::NetAddress *)& ((arg1)->ServerAddress);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_ServerUpTime_set(void * jarg1, void * jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  TimeStampSec arg2 ;
  TimeStampSec *argp2 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  argp2 = (TimeStampSec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ServerUpTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceInformation_ServerUpTime_get(void * jarg1) {
  void * jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  TimeStampSec result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result =  ((arg1)->ServerUpTime);
  jresult = new TimeStampSec((const TimeStampSec &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceInformation_Workload_set(void * jarg1, unsigned int jarg2) {
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Workload = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceInformation_Workload_get(void * jarg1) {
  unsigned int jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  UINT32 result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  result = (UINT32) ((arg1)->Workload);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceInformation__SWIG_0() {
  void * jresult ;
  BR::ServiceInformation *result = 0 ;
  
  result = (BR::ServiceInformation *)new BR::ServiceInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::ServiceInformation *arg1 = 0 ;
  BR::ServiceInformation *result = 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServiceInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::ServiceInformation *)new BR::ServiceInformation((BR::ServiceInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceInformation__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  void * jresult ;
  BR::EntityUID arg1 ;
  BR::ClusterMembership arg2 ;
  BR::ServiceStatus arg3 ;
  BR::NetClass arg4 ;
  BR::NetAddress *arg5 = 0 ;
  TimeStampSec arg6 ;
  UINT32 arg7 ;
  BR::EntityUID *argp1 ;
  TimeStampSec *argp6 ;
  BR::ServiceInformation *result = 0 ;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (BR::ClusterMembership)jarg2; 
  arg3 = (BR::ServiceStatus)jarg3; 
  arg4 = (BR::NetClass)jarg4; 
  arg5 = (BR::NetAddress *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  argp6 = (TimeStampSec *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeStampSec", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (UINT32)jarg7; 
  result = (BR::ServiceInformation *)new BR::ServiceInformation(arg1,arg2,arg3,arg4,(BR::NetAddress const &)*arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceInformation__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::ServiceInformation *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::ServiceInformation *)new BR::ServiceInformation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ServiceInformation *arg2 = 0 ;
  BR::ServiceInformation *result = 0 ;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::ServiceInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServiceInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::ServiceInformation *) &(arg1)->operator =((BR::ServiceInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::ServiceInformation *arg1 = (BR::ServiceInformation *) 0 ;
  BR::ServiceInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::ServiceInformation *)jarg1; 
  arg2 = (BR::ServiceInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::ServiceInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::ServiceInformation const *)arg1)->operator ==((BR::ServiceInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GlobalUID_BIT_SERVERID_get() {
  int jresult ;
  int result;
  
  result = (int)BR::GlobalUID::BIT_SERVERID;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GlobalUID_BIT_ID_get() {
  int jresult ;
  int result;
  
  result = (int)BR::GlobalUID::BIT_ID;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlobalUID_Time_set(void * jarg1, unsigned int jarg2) {
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GlobalUID_Time_get(void * jarg1) {
  unsigned int jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  result = (UINT32) ((arg1)->Time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlobalUID_SvrID_set(void * jarg1, unsigned int jarg2) {
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->SvrID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GlobalUID_SvrID_get(void * jarg1) {
  unsigned int jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  result = (UINT32) ((arg1)->SvrID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlobalUID_ID_set(void * jarg1, unsigned int jarg2) {
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GlobalUID_ID_get(void * jarg1) {
  unsigned int jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  result = (UINT32) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlobalUID_UID_set(void * jarg1, unsigned long long jarg2) {
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->UID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GlobalUID_UID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  UINT64 result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  result =  ((arg1)->UID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GlobalUID__SWIG_0() {
  void * jresult ;
  BR::GlobalUID *result = 0 ;
  
  result = (BR::GlobalUID *)new BR::GlobalUID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GlobalUID__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::GlobalUID *arg1 = 0 ;
  BR::GlobalUID *result = 0 ;
  
  arg1 = (BR::GlobalUID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::GlobalUID const & type is null", 0);
    return 0;
  } 
  result = (BR::GlobalUID *)new BR::GlobalUID((BR::GlobalUID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GlobalUID__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  UINT arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  BR::GlobalUID *result = 0 ;
  
  arg1 = (UINT)jarg1; 
  arg2 = (UINT32)jarg2; 
  arg3 = (UINT32)jarg3; 
  result = (BR::GlobalUID *)new BR::GlobalUID(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GlobalUID__SWIG_3(unsigned long long jarg1) {
  void * jresult ;
  UINT64 arg1 ;
  BR::GlobalUID *result = 0 ;
  
  arg1 = (UINT64)jarg1; 
  result = (BR::GlobalUID *)new BR::GlobalUID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GlobalUID_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  BR::GlobalUID *arg2 = 0 ;
  BR::GlobalUID *result = 0 ;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (BR::GlobalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::GlobalUID const & type is null", 0);
    return 0;
  } 
  result = (BR::GlobalUID *) &(arg1)->operator =((BR::GlobalUID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GlobalUID_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  BR::GlobalUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (BR::GlobalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::GlobalUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::GlobalUID const *)arg1)->operator ==((BR::GlobalUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GlobalUID_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::GlobalUID *arg1 = (BR::GlobalUID *) 0 ;
  BR::GlobalUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::GlobalUID *)jarg1; 
  arg2 = (BR::GlobalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::GlobalUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::GlobalUID const *)arg1)->operator !=((BR::GlobalUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalUID_Time_set(void * jarg1, unsigned int jarg2) {
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalUID_Time_get(void * jarg1) {
  unsigned int jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::LocalUID *)jarg1; 
  result = (UINT32) ((arg1)->Time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalUID_ID_set(void * jarg1, unsigned int jarg2) {
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalUID_ID_get(void * jarg1) {
  unsigned int jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::LocalUID *)jarg1; 
  result = (UINT32) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalUID_UID_set(void * jarg1, unsigned long long jarg2) {
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->UID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LocalUID_UID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  UINT64 result;
  
  arg1 = (BR::LocalUID *)jarg1; 
  result =  ((arg1)->UID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalUID__SWIG_0() {
  void * jresult ;
  BR::LocalUID *result = 0 ;
  
  result = (BR::LocalUID *)new BR::LocalUID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalUID__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::LocalUID *arg1 = 0 ;
  BR::LocalUID *result = 0 ;
  
  arg1 = (BR::LocalUID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::LocalUID const & type is null", 0);
    return 0;
  } 
  result = (BR::LocalUID *)new BR::LocalUID((BR::LocalUID const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalUID__SWIG_2(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  UINT32 arg1 ;
  UINT32 arg2 ;
  BR::LocalUID *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  arg2 = (UINT32)jarg2; 
  result = (BR::LocalUID *)new BR::LocalUID(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalUID__SWIG_3(unsigned long long jarg1) {
  void * jresult ;
  UINT64 arg1 ;
  BR::LocalUID *result = 0 ;
  
  arg1 = (UINT64)jarg1; 
  result = (BR::LocalUID *)new BR::LocalUID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalUID_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  BR::LocalUID *arg2 = 0 ;
  BR::LocalUID *result = 0 ;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (BR::LocalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::LocalUID const & type is null", 0);
    return 0;
  } 
  result = (BR::LocalUID *) &(arg1)->operator =((BR::LocalUID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalUID_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  BR::LocalUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (BR::LocalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::LocalUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::LocalUID const *)arg1)->operator ==((BR::LocalUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalUID_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::LocalUID *arg1 = (BR::LocalUID *) 0 ;
  BR::LocalUID *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::LocalUID *)jarg1; 
  arg2 = (BR::LocalUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::LocalUID const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::LocalUID const *)arg1)->operator !=((BR::LocalUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueTicket_QueueUID_set(void * jarg1, void * jarg2) {
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::EntityUID *arg2 = (BR::EntityUID *) 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2; 
  if (arg1) (arg1)->QueueUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueTicket_QueueUID_get(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  result = (BR::EntityUID *)& ((arg1)->QueueUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueTicket_QueueItemID_set(void * jarg1, void * jarg2) {
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::LocalUID *arg2 = (BR::LocalUID *) 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  arg2 = (BR::LocalUID *)jarg2; 
  if (arg1) (arg1)->QueueItemID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueTicket_QueueItemID_get(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::LocalUID *result = 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  result = (BR::LocalUID *)& ((arg1)->QueueItemID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueTicket__SWIG_0() {
  void * jresult ;
  BR::MatchingQueueTicket *result = 0 ;
  
  result = (BR::MatchingQueueTicket *)new BR::MatchingQueueTicket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueTicket__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueTicket *arg1 = 0 ;
  BR::MatchingQueueTicket *result = 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueTicket const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingQueueTicket *)new BR::MatchingQueueTicket((BR::MatchingQueueTicket const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueTicket__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::EntityUID arg1 ;
  BR::LocalUID arg2 ;
  BR::EntityUID *argp1 ;
  BR::LocalUID *argp2 ;
  BR::MatchingQueueTicket *result = 0 ;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BR::LocalUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::LocalUID", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (BR::MatchingQueueTicket *)new BR::MatchingQueueTicket(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueTicket__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::MatchingQueueTicket *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::MatchingQueueTicket *)new BR::MatchingQueueTicket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueTicket_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::MatchingQueueTicket *arg2 = 0 ;
  BR::MatchingQueueTicket *result = 0 ;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  arg2 = (BR::MatchingQueueTicket *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueTicket const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingQueueTicket *) &(arg1)->operator =((BR::MatchingQueueTicket const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatchingQueueTicket_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::MatchingQueueTicket *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  arg2 = (BR::MatchingQueueTicket *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueTicket const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::MatchingQueueTicket const *)arg1)->operator ==((BR::MatchingQueueTicket const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatchingQueueTicket_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::MatchingQueueTicket *arg1 = (BR::MatchingQueueTicket *) 0 ;
  BR::MatchingQueueTicket *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::MatchingQueueTicket *)jarg1; 
  arg2 = (BR::MatchingQueueTicket *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueTicket const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::MatchingQueueTicket const *)arg1)->operator !=((BR::MatchingQueueTicket const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingPlayerInformation_PlayerUID_set(void * jarg1, void * jarg2) {
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::EntityUID *arg2 = (BR::EntityUID *) 0 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2; 
  if (arg1) (arg1)->PlayerUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingPlayerInformation_PlayerUID_get(void * jarg1) {
  void * jresult ;
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  result = (BR::EntityUID *)& ((arg1)->PlayerUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingPlayerInformation_PlayerID_set(void * jarg1, unsigned long long jarg2) {
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::AccountID arg2 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  arg2 = (BR::AccountID)jarg2; 
  if (arg1) (arg1)->PlayerID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_MatchingPlayerInformation_PlayerID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::AccountID result;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  result =  ((arg1)->PlayerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingPlayerInformation_RequestedRole_set(void * jarg1, int jarg2) {
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::PlayerRole arg2 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  arg2 = (BR::PlayerRole)jarg2; 
  if (arg1) (arg1)->RequestedRole = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MatchingPlayerInformation_RequestedRole_get(void * jarg1) {
  int jresult ;
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::PlayerRole result;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  result = (BR::PlayerRole) ((arg1)->RequestedRole);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingPlayerInformation__SWIG_0() {
  void * jresult ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  result = (BR::MatchingPlayerInformation *)new BR::MatchingPlayerInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingPlayerInformation__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::MatchingPlayerInformation *arg1 = 0 ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingPlayerInformation *)new BR::MatchingPlayerInformation((BR::MatchingPlayerInformation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingPlayerInformation__SWIG_2(void * jarg1, unsigned long long jarg2, int jarg3) {
  void * jresult ;
  BR::EntityUID arg1 ;
  BR::AccountID arg2 ;
  BR::PlayerRole arg3 ;
  BR::EntityUID *argp1 ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (BR::AccountID)jarg2; 
  arg3 = (BR::PlayerRole)jarg3; 
  result = (BR::MatchingPlayerInformation *)new BR::MatchingPlayerInformation(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingPlayerInformation__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::MatchingPlayerInformation *)new BR::MatchingPlayerInformation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingPlayerInformation_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::MatchingPlayerInformation *arg2 = 0 ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  arg2 = (BR::MatchingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingPlayerInformation *) &(arg1)->operator =((BR::MatchingPlayerInformation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatchingPlayerInformation_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::MatchingPlayerInformation *arg1 = (BR::MatchingPlayerInformation *) 0 ;
  BR::MatchingPlayerInformation *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::MatchingPlayerInformation *)jarg1; 
  arg2 = (BR::MatchingPlayerInformation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingPlayerInformation const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::MatchingPlayerInformation const *)arg1)->operator ==((BR::MatchingPlayerInformation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MatchingQueueItem_MAX_NUM_PLAYER_get() {
  int jresult ;
  int result;
  
  result = (int)BR::MatchingQueueItem::MAX_NUM_PLAYER;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueItem_RegisterUID_set(void * jarg1, void * jarg2) {
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::EntityUID *arg2 = (BR::EntityUID *) 0 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2; 
  if (arg1) (arg1)->RegisterUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueItem_RegisterUID_get(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  result = (BR::EntityUID *)& ((arg1)->RegisterUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueItem_RegisterID_set(void * jarg1, unsigned long long jarg2) {
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::PlayerID arg2 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (BR::PlayerID)jarg2; 
  if (arg1) (arg1)->RegisterID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_MatchingQueueItem_RegisterID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::PlayerID result;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  result =  ((arg1)->RegisterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueItem_NumPlayers_set(void * jarg1, unsigned int jarg2) {
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->NumPlayers = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatchingQueueItem_NumPlayers_get(void * jarg1) {
  unsigned int jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  UINT32 result;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  result = (UINT32) ((arg1)->NumPlayers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MatchingQueueItem_Players_set(void * jarg1, void * jarg2) {
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::MatchingPlayerInformation *arg2 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (BR::MatchingPlayerInformation *)jarg2; 
  {
    size_t ii;
    BR::MatchingPlayerInformation *b = (BR::MatchingPlayerInformation *) arg1->Players;
    for (ii = 0; ii < (size_t)BR::MatchingQueueItem::MAX_NUM_PLAYER; ii++) b[ii] = *((BR::MatchingPlayerInformation *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueItem_Players_get(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::MatchingPlayerInformation *result = 0 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  result = (BR::MatchingPlayerInformation *)(BR::MatchingPlayerInformation *) ((arg1)->Players);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueItem__SWIG_0() {
  void * jresult ;
  BR::MatchingQueueItem *result = 0 ;
  
  result = (BR::MatchingQueueItem *)new BR::MatchingQueueItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueItem__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::MatchingQueueItem *arg1 = 0 ;
  BR::MatchingQueueItem *result = 0 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueItem const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingQueueItem *)new BR::MatchingQueueItem((BR::MatchingQueueItem const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueItem__SWIG_2(void * jarg1, unsigned long long jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  BR::EntityUID arg1 ;
  BR::PlayerID arg2 ;
  UINT arg3 ;
  BR::MatchingPlayerInformation *arg4 = (BR::MatchingPlayerInformation *) 0 ;
  BR::EntityUID *argp1 ;
  BR::MatchingQueueItem *result = 0 ;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (BR::PlayerID)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (BR::MatchingPlayerInformation *)jarg4; 
  result = (BR::MatchingQueueItem *)new BR::MatchingQueueItem(arg1,arg2,arg3,(BR::MatchingPlayerInformation const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MatchingQueueItem__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  BR::MatchingQueueItem *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BR::MatchingQueueItem *)new BR::MatchingQueueItem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MatchingQueueItem_SetQueueItem(void * jarg1, void * jarg2, unsigned long long jarg3, unsigned int jarg4, void * jarg5) {
  long jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::EntityUID arg2 ;
  BR::PlayerID arg3 ;
  UINT arg4 ;
  BR::MatchingPlayerInformation *arg5 = (BR::MatchingPlayerInformation *) 0 ;
  BR::EntityUID *argp2 ;
  HRESULT result;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  argp2 = (BR::EntityUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BR::PlayerID)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (BR::MatchingPlayerInformation *)jarg5; 
  result = (HRESULT)(arg1)->SetQueueItem(arg2,arg3,arg4,(BR::MatchingPlayerInformation const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatchingQueueItem_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::MatchingQueueItem *arg2 = 0 ;
  BR::MatchingQueueItem *result = 0 ;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (BR::MatchingQueueItem *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueItem const & type is null", 0);
    return 0;
  } 
  result = (BR::MatchingQueueItem *) &(arg1)->operator =((BR::MatchingQueueItem const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MatchingQueueItem_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::MatchingQueueItem *arg1 = (BR::MatchingQueueItem *) 0 ;
  BR::MatchingQueueItem *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::MatchingQueueItem *)jarg1; 
  arg2 = (BR::MatchingQueueItem *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::MatchingQueueItem const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::MatchingQueueItem const *)arg1)->operator ==((BR::MatchingQueueItem const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounterInfo_DateType_set(void * jarg1, unsigned int jarg2) {
  BR::PerformanceCounterInfo *arg1 = (BR::PerformanceCounterInfo *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::PerformanceCounterInfo *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->DateType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInfo_DateType_get(void * jarg1) {
  unsigned int jresult ;
  BR::PerformanceCounterInfo *arg1 = (BR::PerformanceCounterInfo *) 0 ;
  UINT32 result;
  
  arg1 = (BR::PerformanceCounterInfo *)jarg1; 
  result = (UINT32) ((arg1)->DateType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounterInfo_CounterName_set(void * jarg1, char * jarg2) {
  BR::PerformanceCounterInfo *arg1 = (BR::PerformanceCounterInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::PerformanceCounterInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CounterName, (const char *)arg2, 128-1);
      arg1->CounterName[128-1] = 0;
    } else {
      arg1->CounterName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PerformanceCounterInfo_CounterName_get(void * jarg1) {
  char * jresult ;
  BR::PerformanceCounterInfo *arg1 = (BR::PerformanceCounterInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::PerformanceCounterInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->CounterName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInfo_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::PerformanceCounterInfo *arg1 = (BR::PerformanceCounterInfo *) 0 ;
  BR::PerformanceCounterInfo *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::PerformanceCounterInfo *)jarg1; 
  arg2 = (BR::PerformanceCounterInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInfo const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::PerformanceCounterInfo const *)arg1)->operator ==((BR::PerformanceCounterInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounterInstanceInfo_InstanceName_set(void * jarg1, char * jarg2) {
  BR::PerformanceCounterInstanceInfo *arg1 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (BR::PerformanceCounterInstanceInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InstanceName, (const char *)arg2, 128-1);
      arg1->InstanceName[128-1] = 0;
    } else {
      arg1->InstanceName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PerformanceCounterInstanceInfo_InstanceName_get(void * jarg1) {
  char * jresult ;
  BR::PerformanceCounterInstanceInfo *arg1 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::PerformanceCounterInstanceInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->InstanceName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounterInstanceInfo_InstanceUID_set(void * jarg1, void * jarg2) {
  BR::PerformanceCounterInstanceInfo *arg1 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  BR::EntityUID *arg2 = (BR::EntityUID *) 0 ;
  
  arg1 = (BR::PerformanceCounterInstanceInfo *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2; 
  if (arg1) (arg1)->InstanceUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerformanceCounterInstanceInfo_InstanceUID_get(void * jarg1) {
  void * jresult ;
  BR::PerformanceCounterInstanceInfo *arg1 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::PerformanceCounterInstanceInfo *)jarg1; 
  result = (BR::EntityUID *)& ((arg1)->InstanceUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInstanceInfo_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::PerformanceCounterInstanceInfo *arg1 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  BR::PerformanceCounterInstanceInfo *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::PerformanceCounterInstanceInfo *)jarg1; 
  arg2 = (BR::PerformanceCounterInstanceInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInstanceInfo const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::PerformanceCounterInstanceInfo const *)arg1)->operator ==((BR::PerformanceCounterInstanceInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BinaryHeader_Magic_set(void * jarg1, unsigned short jarg2) {
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->Magic = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_BinaryHeader_Magic_get(void * jarg1) {
  unsigned short jresult ;
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT16 result;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  result = (UINT16) ((arg1)->Magic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BinaryHeader_Version_set(void * jarg1, unsigned short jarg2) {
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT16 arg2 ;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  arg2 = (UINT16)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_BinaryHeader_Version_get(void * jarg1) {
  unsigned short jresult ;
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT16 result;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  result = (UINT16) ((arg1)->Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BinaryHeader_Count_set(void * jarg1, unsigned int jarg2) {
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BinaryHeader_Count_get(void * jarg1) {
  unsigned int jresult ;
  BR::BinaryHeader *arg1 = (BR::BinaryHeader *) 0 ;
  UINT32 result;
  
  arg1 = (BR::BinaryHeader *)jarg1; 
  result = (UINT32) ((arg1)->Count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IPolicyBase(unsigned int jarg1) {
  void * jresult ;
  UINT arg1 ;
  BR::IPolicyBase *result = 0 ;
  
  arg1 = (UINT)jarg1; 
  result = (BR::IPolicyBase *)new BR::IPolicyBase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPolicyBase(void * jarg1) {
  BR::IPolicyBase *arg1 = (BR::IPolicyBase *) 0 ;
  
  arg1 = (BR::IPolicyBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPolicyBase_GetPolicyID(void * jarg1) {
  unsigned int jresult ;
  BR::IPolicyBase *arg1 = (BR::IPolicyBase *) 0 ;
  UINT32 result;
  
  arg1 = (BR::IPolicyBase *)jarg1; 
  result = (UINT32)((BR::IPolicyBase const *)arg1)->GetPolicyID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NET_SEQUENCE_BITS_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NET_SEQUENCE_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(((1 << 11) -1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageID_ID_set(void * jarg1, unsigned int jarg2) {
  BR::Message::tag_MessageID *arg1 = (BR::Message::tag_MessageID *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Message::tag_MessageID *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageID_ID_get(void * jarg1) {
  unsigned int jresult ;
  BR::Message::tag_MessageID *arg1 = (BR::Message::tag_MessageID *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Message::tag_MessageID *)jarg1; 
  result = (UINT32) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessageID__SWIG_0() {
  void * jresult ;
  BR::Message::tag_MessageID *result = 0 ;
  
  result = (BR::Message::tag_MessageID *)new BR::Message::tag_MessageID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessageID__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  UINT32 arg1 ;
  BR::Message::tag_MessageID *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  result = (BR::Message::tag_MessageID *)new BR::Message::tag_MessageID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessageID__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  BR::Message::tag_MessageID *result = 0 ;
  
  arg1 = (UINT)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (UINT)jarg5; 
  result = (BR::Message::tag_MessageID *)new BR::Message::tag_MessageID(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageID_SetMessageID(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  BR::Message::tag_MessageID *arg1 = (BR::Message::tag_MessageID *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  UINT arg6 ;
  UINT32 result;
  
  arg1 = (BR::Message::tag_MessageID *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (UINT)jarg4; 
  arg5 = (UINT)jarg5; 
  arg6 = (UINT)jarg6; 
  result = (UINT32)(arg1)->SetMessageID(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageID_GetMsgID(void * jarg1) {
  unsigned int jresult ;
  BR::Message::tag_MessageID *arg1 = (BR::Message::tag_MessageID *) 0 ;
  UINT result;
  
  arg1 = (BR::Message::tag_MessageID *)jarg1; 
  result = (UINT)((BR::Message::tag_MessageID const *)arg1)->GetMsgID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_MESSAGE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MAX_MESSAGE_SIZE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SUBFRAME_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MAX_SUBFRAME_SIZE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_NONE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_NETCONTROL_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_NETCONTROL;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_EVENT_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_EVENT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_COMMAND_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_COMMAND;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_RESULT_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_RESULT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_RELIABLE_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_RELIABLE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSGTYPE_MOBILE_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Message::MSGTYPE_MOBILE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageHeader_msgID_set(void * jarg1, void * jarg2) {
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  BR::Message::MessageID *arg2 = (BR::Message::MessageID *) 0 ;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  arg2 = (BR::Message::MessageID *)jarg2; 
  if (arg1) (arg1)->msgID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageHeader_msgID_get(void * jarg1) {
  void * jresult ;
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  BR::Message::MessageID *result = 0 ;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  result = (BR::Message::MessageID *)& ((arg1)->msgID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageHeader_Length_set(void * jarg1, unsigned int jarg2) {
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageHeader_Length_get(void * jarg1) {
  unsigned int jresult ;
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  result = (UINT32) ((arg1)->Length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageHeader_Crc32_set(void * jarg1, unsigned int jarg2) {
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->Crc32 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageHeader_Crc32_get(void * jarg1) {
  unsigned int jresult ;
  BR::Message::MessageHeader *arg1 = (BR::Message::MessageHeader *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Message::MessageHeader *)jarg1; 
  result = (UINT32) ((arg1)->Crc32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SequenceDifference(unsigned int jarg1, unsigned int jarg2) {
  int jresult ;
  UINT arg1 ;
  UINT arg2 ;
  INT result;
  
  arg1 = (UINT)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (INT)BR::Message::SequenceDifference(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobileMessageHeader_PeerID_set(void * jarg1, unsigned long long jarg2) {
  BR::Message::MobileMessageHeader *arg1 = (BR::Message::MobileMessageHeader *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::Message::MobileMessageHeader *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->PeerID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_MobileMessageHeader_PeerID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::Message::MobileMessageHeader *arg1 = (BR::Message::MobileMessageHeader *) 0 ;
  UINT64 result;
  
  arg1 = (BR::Message::MobileMessageHeader *)jarg1; 
  result =  ((arg1)->PeerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessageData(void * jarg1) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_GetMessageHeader(void * jarg1) {
  void * jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  BR::Message::MessageHeader *result = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (BR::Message::MessageHeader *)(arg1)->GetMessageHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_GetMobileMessageHeader(void * jarg1) {
  void * jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  BR::Message::MobileMessageHeader *result = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (BR::Message::MobileMessageHeader *)(arg1)->GetMobileMessageHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_GetMessageBuff(void * jarg1) {
  void * jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (BYTE *)(arg1)->GetMessageBuff();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageData_GetMessageSize(void * jarg1) {
  unsigned int jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  UINT result;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (UINT)((BR::Message::MessageData const *)arg1)->GetMessageSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_GetMessageData(void * jarg1) {
  void * jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (BYTE *)(arg1)->GetMessageData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_GetLengthNDataPtr(void * jarg1, void * jarg2, void * jarg3) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  UINT *arg2 = 0 ;
  BYTE **arg3 = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  arg2 = (UINT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UINT & type is null", 0);
    return ;
  } 
  arg3 = (BYTE **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BYTE *& type is null", 0);
    return ;
  } 
  (arg1)->GetLengthNDataPtr(*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageData_GetDataLength(void * jarg1) {
  unsigned int jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  UINT result;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (UINT)(arg1)->GetDataLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_ClearAssignedSequence(void * jarg1) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  (arg1)->ClearAssignedSequence();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_AssignSequence(void * jarg1, unsigned int jarg2) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  UINT arg2 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  arg2 = (UINT)jarg2; 
  (arg1)->AssignSequence(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessageData_GetIsSequenceAssigned(void * jarg1) {
  unsigned int jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  bool result;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (bool)(arg1)->GetIsSequenceAssigned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_NewMessage__SWIG_0(unsigned int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  UINT32 arg1 ;
  UINT arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  BR::Message::MessageData *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (BYTE *)jarg3; 
  result = (BR::Message::MessageData *)BR::Message::MessageData::NewMessage(arg1,arg2,(unsigned char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_NewMessage__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  UINT32 arg1 ;
  UINT arg2 ;
  BR::Message::MessageData *result = 0 ;
  
  arg1 = (UINT32)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::Message::MessageData *)BR::Message::MessageData::NewMessage(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageData_Clone(void * jarg1) {
  void * jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  BR::Message::MessageData *result = 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (BR::Message::MessageData *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_UpdateChecksum(void * jarg1) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  (arg1)->UpdateChecksum();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_UpdateChecksumNEncrypt(void * jarg1) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  (arg1)->UpdateChecksumNEncrypt();
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageData_ValidateChecksum(void * jarg1) {
  long jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (HRESULT)(arg1)->ValidateChecksum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageData_ValidateChecksumNDecrypt(void * jarg1) {
  long jresult ;
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  result = (HRESULT)(arg1)->ValidateChecksumNDecrypt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MessageData_DeleteThis(void * jarg1) {
  BR::Message::MessageData *arg1 = (BR::Message::MessageData *) 0 ;
  
  arg1 = (BR::Message::MessageData *)jarg1; 
  ((BR::Message::MessageData const *)arg1)->DeleteThis();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessageBase(void * jarg1) {
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessageBase_GetMessage(void * jarg1) {
  void * jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  BR::Message::MessageData *result = 0 ;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  result = (BR::Message::MessageData *)(arg1)->GetMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageBase_GetParsingResult(void * jarg1) {
  long jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  result = (HRESULT)(arg1)->GetParsingResult();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageBase_ParseMsg(void * jarg1) {
  long jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  result = (HRESULT)(arg1)->ParseMsg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageBase_ParseIMsg(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  BR::Message::MessageData *arg2 = (BR::Message::MessageData *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  arg2 = (BR::Message::MessageData *)jarg2; 
  result = (HRESULT)(arg1)->ParseIMsg(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageBase_OverrideRouteContextDestination(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  BR::EntityUID arg2 ;
  BR::EntityUID *argp2 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  argp2 = (BR::EntityUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (HRESULT)(arg1)->OverrideRouteContextDestination(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MessageBase_OverrideRouteInfomation(void * jarg1, void * jarg2, unsigned int jarg3) {
  long jresult ;
  BR::Message::MessageBase *arg1 = (BR::Message::MessageBase *) 0 ;
  BR::EntityUID arg2 ;
  UINT arg3 ;
  BR::EntityUID *argp2 ;
  HRESULT result;
  
  arg1 = (BR::Message::MessageBase *)jarg1; 
  argp2 = (BR::EntityUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UINT)jarg3; 
  result = (HRESULT)(arg1)->OverrideRouteInfomation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedObject() {
  void * jresult ;
  BR::SharedObject *result = 0 ;
  
  result = (BR::SharedObject *)new BR::SharedObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedObject(void * jarg1) {
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  
  arg1 = (BR::SharedObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedObject_GetReferenceCount(void * jarg1) {
  long long jresult ;
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  BR::SharedObject::ReferenceCounterType result;
  
  arg1 = (BR::SharedObject *)jarg1; 
  result = (BR::SharedObject::ReferenceCounterType)((BR::SharedObject const *)arg1)->GetReferenceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedObject_GetWeakReferenceCount(void * jarg1) {
  long long jresult ;
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  BR::SharedObject::ReferenceCounterType result;
  
  arg1 = (BR::SharedObject *)jarg1; 
  result = (BR::SharedObject::ReferenceCounterType)((BR::SharedObject const *)arg1)->GetWeakReferenceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SharedObject_GetManagerReferenceCount(void * jarg1) {
  long long jresult ;
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  BR::SharedObject::ReferenceCounterType result;
  
  arg1 = (BR::SharedObject *)jarg1; 
  result = (BR::SharedObject::ReferenceCounterType)((BR::SharedObject const *)arg1)->GetManagerReferenceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedObject_GetReferenceManager(void * jarg1) {
  void * jresult ;
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  BR::SharedReferenceManager *result = 0 ;
  
  arg1 = (BR::SharedObject *)jarg1; 
  result = (BR::SharedReferenceManager *)(arg1)->GetReferenceManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedObject_NativeDispose(void * jarg1) {
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  
  arg1 = (BR::SharedObject *)jarg1; 
  (arg1)->Dispose();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedPointer__SWIG_0() {
  void * jresult ;
  BR::SharedPointer *result = 0 ;
  
  result = (BR::SharedPointer *)new BR::SharedPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedPointer__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::SharedPointer *arg1 = 0 ;
  BR::SharedPointer *result = 0 ;
  
  arg1 = (BR::SharedPointer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (BR::SharedPointer *)new BR::SharedPointer((BR::SharedPointer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedPointer__SWIG_2(void * jarg1) {
  void * jresult ;
  BR::SharedObject *arg1 = (BR::SharedObject *) 0 ;
  BR::SharedPointer *result = 0 ;
  
  arg1 = (BR::SharedObject *)jarg1; 
  result = (BR::SharedPointer *)new BR::SharedPointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedPointer(void * jarg1) {
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedPointer_ReleaseReference(void * jarg1) {
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  ((BR::SharedPointer const *)arg1)->ReleaseReference();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedPointer_CopyFrom(void * jarg1, void * jarg2) {
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return ;
  } 
  (arg1)->operator =((BR::SharedPointer const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedPointer_EqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::SharedPointer const *)arg1)->operator ==((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedPointer_NotEqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::SharedPointer const *)arg1)->operator !=((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedPointer_EqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::SharedPointer const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharedPointer_NotEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointer *arg1 = (BR::SharedPointer *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::SharedPointer *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::SharedPointer const *)arg1)->operator !=(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeakPointer_FromSharedObject(void * jarg1, void * jarg2) {
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  (arg1)->FromSharedObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeakPointer__SWIG_1() {
  void * jresult ;
  BR::WeakPointer *result = 0 ;
  
  result = (BR::WeakPointer *)new BR::WeakPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeakPointer__SWIG_2(void * jarg1) {
  void * jresult ;
  BR::WeakPointer *arg1 = 0 ;
  BR::WeakPointer *result = 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::WeakPointer const & type is null", 0);
    return 0;
  } 
  result = (BR::WeakPointer *)new BR::WeakPointer((BR::WeakPointer const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeakPointer(void * jarg1) {
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeakPointer_ReleaseReference(void * jarg1) {
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  ((BR::WeakPointer const *)arg1)->ReleaseReference();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeakPointer_ToSharedPointer(void * jarg1) {
  void * jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedPointer result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  result = (arg1)->operator BR::SharedPointer();
  jresult = new BR::SharedPointer((const BR::SharedPointer &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_EqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::WeakPointer const *)arg1)->operator ==((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_NotEqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::WeakPointer const *)arg1)->operator !=((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_EqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::WeakPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::WeakPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::WeakPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::WeakPointer const *)arg1)->operator ==((BR::WeakPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_NotEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::WeakPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::WeakPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::WeakPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::WeakPointer const *)arg1)->operator !=((BR::WeakPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_EqualTo__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::WeakPointer const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeakPointer_NotEqualTo__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::WeakPointer const *)arg1)->operator !=(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeakPointer_CopyFrom__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  BR::WeakPointer *result = 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (BR::WeakPointer *) &(arg1)->operator =((BR::SharedPointer const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeakPointer_CopyFrom__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::WeakPointer *arg1 = (BR::WeakPointer *) 0 ;
  BR::WeakPointer *arg2 = 0 ;
  BR::WeakPointer *result = 0 ;
  
  arg1 = (BR::WeakPointer *)jarg1; 
  arg2 = (BR::WeakPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::WeakPointer const & type is null", 0);
    return 0;
  } 
  result = (BR::WeakPointer *) &(arg1)->operator =((BR::WeakPointer const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Event_EventType_set(void * jarg1, int jarg2) {
  BR::Net::IConnection::Event *arg1 = (BR::Net::IConnection::Event *) 0 ;
  BR::Net::IConnection::Event::EventTypes arg2 ;
  
  arg1 = (BR::Net::IConnection::Event *)jarg1; 
  arg2 = (BR::Net::IConnection::Event::EventTypes)jarg2; 
  if (arg1) (arg1)->EventType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConnection_Event_EventType_get(void * jarg1) {
  int jresult ;
  BR::Net::IConnection::Event *arg1 = (BR::Net::IConnection::Event *) 0 ;
  BR::Net::IConnection::Event::EventTypes result;
  
  arg1 = (BR::Net::IConnection::Event *)jarg1; 
  result = (BR::Net::IConnection::Event::EventTypes) ((arg1)->EventType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IConnection_Event__SWIG_0(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  BR::Net::IConnection::Event *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (BR::Net::IConnection::Event *)new BR::Net::IConnection::Event(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IConnection_Event__SWIG_1() {
  void * jresult ;
  BR::Net::IConnection::Event *result = 0 ;
  
  result = (BR::Net::IConnection::Event *)new BR::Net::IConnection::Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IConnection_Event__SWIG_2(int jarg1, long jarg2) {
  void * jresult ;
  BR::Net::IConnection::Event::EventTypes arg1 ;
  HRESULT arg2 ;
  BR::Net::IConnection::Event *result = 0 ;
  
  arg1 = (BR::Net::IConnection::Event::EventTypes)jarg1; 
  arg2 = (HRESULT)jarg2; 
  result = (BR::Net::IConnection::Event *)new BR::Net::IConnection::Event(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IConnection_Event__SWIG_3(int jarg1, int jarg2) {
  void * jresult ;
  BR::Net::IConnection::Event::EventTypes arg1 ;
  BR::Net::IConnection::ConnectionState arg2 ;
  BR::Net::IConnection::Event *result = 0 ;
  
  arg1 = (BR::Net::IConnection::Event::EventTypes)jarg1; 
  arg2 = (BR::Net::IConnection::ConnectionState)jarg2; 
  result = (BR::Net::IConnection::Event *)new BR::Net::IConnection::Event(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_Event_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::Net::IConnection::Event *arg1 = (BR::Net::IConnection::Event *) 0 ;
  BR::Net::IConnection::Event *arg2 = 0 ;
  BR::Net::IConnection::Event *result = 0 ;
  
  arg1 = (BR::Net::IConnection::Event *)jarg1; 
  arg2 = (BR::Net::IConnection::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection::Event const & type is null", 0);
    return 0;
  } 
  result = (BR::Net::IConnection::Event *) &(arg1)->operator =((BR::Net::IConnection::Event const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Event_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::Net::IConnection::Event *arg1 = (BR::Net::IConnection::Event *) 0 ;
  BR::Net::IConnection::Event *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::Net::IConnection::Event *)jarg1; 
  arg2 = (BR::Net::IConnection::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection::Event const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::Net::IConnection::Event const *)arg1)->operator ==((BR::Net::IConnection::Event const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Event_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::Net::IConnection::Event *arg1 = (BR::Net::IConnection::Event *) 0 ;
  BR::Net::IConnection::Event *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::Net::IConnection::Event *)jarg1; 
  arg2 = (BR::Net::IConnection::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection::Event const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::Net::IConnection::Event const *)arg1)->operator !=((BR::Net::IConnection::Event const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_Local_set(void * jarg1, void * jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetAddress *arg2 = (BR::NetAddress *) 0 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2; 
  if (arg1) (arg1)->Local = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_ConnectionInformation_Local_get(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result = (BR::NetAddress *)& ((arg1)->Local);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_LocalClass_set(void * jarg1, int jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass arg2 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  if (arg1) (arg1)->LocalClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConnection_ConnectionInformation_LocalClass_get(void * jarg1) {
  int jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass result;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result = (BR::NetClass) ((arg1)->LocalClass);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_LocalID_set(void * jarg1, unsigned long long jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->LocalID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IConnection_ConnectionInformation_LocalID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  UINT64 result;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result =  ((arg1)->LocalID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_Remote_set(void * jarg1, void * jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetAddress *arg2 = (BR::NetAddress *) 0 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2; 
  if (arg1) (arg1)->Remote = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_ConnectionInformation_Remote_get(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetAddress *result = 0 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result = (BR::NetAddress *)& ((arg1)->Remote);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_RemoteClass_set(void * jarg1, int jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass arg2 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  if (arg1) (arg1)->RemoteClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConnection_ConnectionInformation_RemoteClass_get(void * jarg1) {
  int jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass result;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result = (BR::NetClass) ((arg1)->RemoteClass);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_RemoteID_set(void * jarg1, unsigned long long jarg2) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (UINT64)jarg2; 
  if (arg1) (arg1)->RemoteID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IConnection_ConnectionInformation_RemoteID_get(void * jarg1) {
  unsigned long long jresult ;
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  UINT64 result;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  result =  ((arg1)->RemoteID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_SetLocalInfo(void * jarg1, int jarg2, void * jarg3, unsigned long long jarg4) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass arg2 ;
  BR::NetAddress *arg3 = 0 ;
  UINT64 arg4 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  arg3 = (BR::NetAddress *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return ;
  } 
  arg4 = (UINT64)jarg4; 
  (arg1)->SetLocalInfo(arg2,(BR::NetAddress const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ConnectionInformation_SetRemoteInfo(void * jarg1, int jarg2, unsigned long long jarg3) {
  BR::Net::IConnection::ConnectionInformation *arg1 = (BR::Net::IConnection::ConnectionInformation *) 0 ;
  BR::NetClass arg2 ;
  UINT64 arg3 ;
  
  arg1 = (BR::Net::IConnection::ConnectionInformation *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  arg3 = (UINT64)jarg3; 
  (arg1)->SetRemoteInfo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_RoundTripLatencyMS_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->RoundTripLatencyMS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_RoundTripLatencyMS_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->RoundTripLatencyMS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_ThroughputBPS_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->ThroughputBPS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_ThroughputBPS_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->ThroughputBPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_PeakThroughputBPS_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->PeakThroughputBPS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_PeakThroughputBPS_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->PeakThroughputBPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_PacketsSentGuaranteed_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->PacketsSentGuaranteed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_PacketsSentGuaranteed_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->PacketsSentGuaranteed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_PacketsSentNonGuaranteed_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->PacketsSentNonGuaranteed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_PacketsSentNonGuaranteed_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->PacketsSentNonGuaranteed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_PacketsRetried_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->PacketsRetried = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_PacketsRetried_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->PacketsRetried);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_PacketsDropped_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->PacketsDropped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_PacketsDropped_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->PacketsDropped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_Statistic_MessagesReceived_set(void * jarg1, unsigned int jarg2) {
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 arg2 ;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  arg2 = (UINT32)jarg2; 
  if (arg1) (arg1)->MessagesReceived = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_Statistic_MessagesReceived_get(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection::tag_Statistic *arg1 = (BR::Net::IConnection::tag_Statistic *) 0 ;
  UINT32 result;
  
  arg1 = (BR::Net::IConnection::tag_Statistic *)jarg1; 
  result = (UINT32) ((arg1)->MessagesReceived);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IConnection(void * jarg1) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_SetupNet(void * jarg1, void * jarg2, uintptr_t jarg3) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::INet *arg2 = (BR::Net::INet *) 0 ;
  uintptr_t arg3 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Net::INet *)jarg2; 
  arg3 = jarg3;
  result = (HRESULT)(arg1)->SetupNet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_GetConnectionInfo(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnection::ConnectionInformation *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Net::IConnection::ConnectionInformation *) &((BR::Net::IConnection const *)arg1)->GetConnectionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_SetRemoteID(void * jarg1, unsigned long long jarg2) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  UINT64 arg2 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (UINT64)jarg2; 
  (arg1)->SetRemoteID(arg2);
}


SWIGEXPORT uintptr_t SWIGSTDCALL CSharp_IConnection_GetCID(void * jarg1) {
  uintptr_t jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  uintptr_t result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (uintptr_t)((BR::Net::IConnection const *)arg1)->GetCID();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_ClearCID(void * jarg1) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  (arg1)->ClearCID();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IConnection_GetPeerID(void * jarg1) {
  unsigned long long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  UINT64 result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = ((BR::Net::IConnection const *)arg1)->GetPeerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConnection_GetConnectionState(void * jarg1) {
  int jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnection::ConnectionState result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Net::IConnection::ConnectionState)((BR::Net::IConnection const *)arg1)->GetConnectionState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_SetLocalClass(void * jarg1, int jarg2) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::NetClass arg2 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  (arg1)->SetLocalClass(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_CreatePolicy(void * jarg1, unsigned int jarg2) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  UINT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (HRESULT)(arg1)->CreatePolicy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT uintptr_t SWIGSTDCALL CSharp_IConnection_GetUData(void * jarg1) {
  uintptr_t jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  uintptr_t result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (uintptr_t)(arg1)->GetUData();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_SetUData(void * jarg1, uintptr_t jarg2) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  uintptr_t arg2 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = jarg2;
  (arg1)->SetUData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_GetConnectionTime(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  TimeStampMS result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (arg1)->GetConnectionTime();
  jresult = new TimeStampMS((const TimeStampMS &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_GetNet(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::INet *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Net::INet *)(arg1)->GetNet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConnection_GetEventHandler(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnectionEventHandler *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Net::IConnectionEventHandler *)(arg1)->GetEventHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_SetEventHandler(void * jarg1, void * jarg2) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnectionEventHandler *arg2 = (BR::Net::IConnectionEventHandler *) 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Net::IConnectionEventHandler *)jarg2; 
  (arg1)->SetEventHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnection_SetConnectionEventHandler(void * jarg1, void * jarg2) {
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnectionEventHandler *arg2 = (BR::Net::IConnectionEventHandler *) 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Net::IConnectionEventHandler *)jarg2; 
  (arg1)->SetConnectionEventHandler(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_InitConnection(void * jarg1, void * jarg2, int jarg3) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::NetAddress *arg2 = 0 ;
  BR::NetClass arg3 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  arg3 = (BR::NetClass)jarg3; 
  result = (HRESULT)(arg1)->InitConnection((BR::NetAddress const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_Disconnect(void * jarg1, char * jarg2) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HRESULT)(arg1)->Disconnect((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_CloseConnection(void * jarg1) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (HRESULT)(arg1)->CloseConnection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_Send(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Message::MessageData **arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Message::MessageData **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Message::MessageData *& type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->Send(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConnection_GetRecvMessageCount(void * jarg1) {
  unsigned int jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  SysUInt result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (SysUInt)(arg1)->GetRecvMessageCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IConnection_GetConnectionEventCount(void * jarg1) {
  unsigned long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  CounterType result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (CounterType)(arg1)->GetConnectionEventCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_DequeueConnectionEvent(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnection::Event *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Net::IConnection::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection::Event & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->DequeueConnectionEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_GetRecvMessage(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Message::MessageData **arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  arg2 = (BR::Message::MessageData **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Message::MessageData *& type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->GetRecvMessage(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_UpdateNetCtrl(void * jarg1) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (HRESULT)(arg1)->UpdateNetCtrl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_UpdateSendQueue(void * jarg1) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (HRESULT)(arg1)->UpdateSendQueue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnection_UpdateSendBufferQueue(void * jarg1) {
  long jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (HRESULT)(arg1)->UpdateSendBufferQueue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IConnectionEventHandler(void * jarg1) {
  BR::Net::IConnectionEventHandler *arg1 = (BR::Net::IConnectionEventHandler *) 0 ;
  
  arg1 = (BR::Net::IConnectionEventHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConnectionEventHandler_OnConnectionEvent(void * jarg1, void * jarg2, void * jarg3) {
  BR::Net::IConnectionEventHandler *arg1 = (BR::Net::IConnectionEventHandler *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  BR::Net::IConnection::Event *arg3 = 0 ;
  
  arg1 = (BR::Net::IConnectionEventHandler *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  arg3 = (BR::Net::IConnection::Event *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection::Event const & type is null", 0);
    return ;
  } 
  (arg1)->OnConnectionEvent(arg2,(BR::Net::IConnection::Event const &)*arg3);
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnectionEventHandler_OnRecvMessage(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  BR::Net::IConnectionEventHandler *arg1 = (BR::Net::IConnectionEventHandler *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  BR::Message::MessageData *arg3 = (BR::Message::MessageData *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnectionEventHandler *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  arg3 = (BR::Message::MessageData *)jarg3; 
  result = (HRESULT)(arg1)->OnRecvMessage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnectionEventHandler_OnNetSyncMessage(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::IConnectionEventHandler *arg1 = (BR::Net::IConnectionEventHandler *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnectionEventHandler *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (HRESULT)(arg1)->OnNetSyncMessage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IConnectionEventHandler_OnNetSendReadyMessage(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::IConnectionEventHandler *arg1 = (BR::Net::IConnectionEventHandler *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IConnectionEventHandler *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (HRESULT)(arg1)->OnNetSendReadyMessage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INet_Event_EventType_set(void * jarg1, int jarg2) {
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::INet::Event::EventTypes arg2 ;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  arg2 = (BR::Net::INet::Event::EventTypes)jarg2; 
  if (arg1) (arg1)->EventType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INet_Event_EventType_get(void * jarg1) {
  int jresult ;
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::INet::Event::EventTypes result;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  result = (BR::Net::INet::Event::EventTypes) ((arg1)->EventType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INet_Event_EventConnection_set(void * jarg1, void * jarg2) {
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  if (arg1) (arg1)->EventConnection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_INet_Event_EventConnection_get(void * jarg1) {
  void * jresult ;
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::IConnection *result = 0 ;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  result = (BR::Net::IConnection *) ((arg1)->EventConnection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INet_Event__SWIG_0(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  BR::Net::INet::Event *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (BR::Net::INet::Event *)new BR::Net::INet::Event(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INet_Event__SWIG_1() {
  void * jresult ;
  BR::Net::INet::Event *result = 0 ;
  
  result = (BR::Net::INet::Event *)new BR::Net::INet::Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INet_Event__SWIG_2(int jarg1, void * jarg2) {
  void * jresult ;
  BR::Net::INet::Event::EventTypes arg1 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  BR::Net::INet::Event *result = 0 ;
  
  arg1 = (BR::Net::INet::Event::EventTypes)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (BR::Net::INet::Event *)new BR::Net::INet::Event(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INet_Event__SWIG_3(int jarg1) {
  void * jresult ;
  BR::Net::INet::Event::EventTypes arg1 ;
  BR::Net::INet::Event *result = 0 ;
  
  arg1 = (BR::Net::INet::Event::EventTypes)jarg1; 
  result = (BR::Net::INet::Event *)new BR::Net::INet::Event(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_INet_Event_CopyFrom(void * jarg1, void * jarg2) {
  void * jresult ;
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::INet::Event *arg2 = 0 ;
  BR::Net::INet::Event *result = 0 ;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  arg2 = (BR::Net::INet::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::INet::Event const & type is null", 0);
    return 0;
  } 
  result = (BR::Net::INet::Event *) &(arg1)->operator =((BR::Net::INet::Event const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_INet_Event_EqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::INet::Event *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  arg2 = (BR::Net::INet::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::INet::Event const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::Net::INet::Event const *)arg1)->operator ==((BR::Net::INet::Event const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_INet_Event_NotEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::Net::INet::Event *arg1 = (BR::Net::INet::Event *) 0 ;
  BR::Net::INet::Event *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::Net::INet::Event *)jarg1; 
  arg2 = (BR::Net::INet::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::INet::Event const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::Net::INet::Event const *)arg1)->operator !=((BR::Net::INet::Event const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INet_m_NetClass_set(void * jarg1, int jarg2) {
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::NetClass arg2 ;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::NetClass)jarg2; 
  if (arg1) (arg1)->m_NetClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INet_m_NetClass_get(void * jarg1) {
  int jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::NetClass result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  result = (BR::NetClass) ((arg1)->m_NetClass);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INet_GetNetClass(void * jarg1) {
  int jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::NetClass result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  result = (BR::NetClass)((BR::Net::INet const *)arg1)->GetNetClass();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INet(void * jarg1) {
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  
  arg1 = (BR::Net::INet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INet_Release(void * jarg1) {
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  
  arg1 = (BR::Net::INet *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_INet_IsReady(void * jarg1) {
  unsigned int jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  bool result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  result = (bool)(arg1)->IsReady();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INet_DequeueNetEvent(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::Net::INet::Event *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::Net::INet::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::INet::Event & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->DequeueNetEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INet_EnqueueNetEvent(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::Net::INet::Event *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::Net::INet::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::INet::Event & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->EnqueueNetEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INet_Connect(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  long jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  UINT arg3 ;
  BR::NetClass arg4 ;
  BR::NetAddress *arg5 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  arg3 = (UINT)jarg3; 
  arg4 = (BR::NetClass)jarg4; 
  arg5 = (BR::NetAddress *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->Connect(arg2,arg3,arg4,(BR::NetAddress const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INet_ReleaseConnection(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (HRESULT)(arg1)->ReleaseConnection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INet_TakeOverConnection(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Net::INet *arg1 = (BR::Net::INet *) 0 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::INet *)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (HRESULT)(arg1)->TakeOverConnection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IClient_GetConnection(void * jarg1, uintptr_t jarg2, void * jarg3) {
  long jresult ;
  BR::Net::IClient *arg1 = (BR::Net::IClient *) 0 ;
  uintptr_t arg2 ;
  BR::SharedPointerT< BR::Net::IConnection > *arg3 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IClient *)jarg1; 
  arg2 = jarg2;
  arg3 = (BR::SharedPointerT< BR::Net::IConnection > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Net::IConnection > & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->GetConnection(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IClient_ConnectCli(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  BR::Net::IClient *arg1 = (BR::Net::IClient *) 0 ;
  BR::NetAddress *arg2 = 0 ;
  BR::Net::IConnection **arg3 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Net::IClient *)jarg1; 
  arg2 = (BR::NetAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  arg3 = (BR::Net::IConnection **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Net::IConnection *& type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->ConnectCli((BR::NetAddress const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INetPolicy(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  UINT arg1 ;
  BR::Net::IConnection *arg2 = (BR::Net::IConnection *) 0 ;
  BR::Net::INetPolicy *result = 0 ;
  
  arg1 = (UINT)jarg1; 
  arg2 = (BR::Net::IConnection *)jarg2; 
  result = (BR::Net::INetPolicy *)new BR::Net::INetPolicy(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INetPolicy(void * jarg1) {
  BR::Net::INetPolicy *arg1 = (BR::Net::INetPolicy *) 0 ;
  
  arg1 = (BR::Net::INetPolicy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_INetPolicy_GetConnection(void * jarg1) {
  void * jresult ;
  BR::Net::INetPolicy *arg1 = (BR::Net::INetPolicy *) 0 ;
  BR::Net::IConnection *result = 0 ;
  
  arg1 = (BR::Net::INetPolicy *)jarg1; 
  result = (BR::Net::IConnection *)((BR::Net::INetPolicy const *)arg1)->GetConnection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayInt64(void * jarg1) {
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt64_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = ((BR::Array< INT64 > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt64_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = ((BR::Array< INT64 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt64_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt64_Clear(void * jarg1) {
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayInt64_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = (bool)((BR::Array< INT64 > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt64_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt64_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = ((BR::Array< INT64 > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt64_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = ((BR::Array< INT64 > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt64_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayInt64_data(void * jarg1) {
  void * jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  signed __int64 *result = 0 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  result = (signed __int64 *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  signed __int64 *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (signed __int64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "signed __int64 const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->push_back((signed __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  size_t arg2 ;
  signed __int64 *arg3 = (signed __int64 *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (signed __int64 *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(signed __int64 const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt64_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  signed __int64 *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (signed __int64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "signed __int64 const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemoveItem((signed __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayInt64_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  signed __int64 *arg2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (signed __int64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "signed __int64 const & type is null", 0);
    return 0;
  } 
  result = (INT)(arg1)->FindItem((signed __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayInt64_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< INT64 > *arg1 = (BR::Array< INT64 > *) 0 ;
  UINT arg2 ;
  signed __int64 *result = 0 ;
  
  arg1 = (BR::Array< INT64 > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (signed __int64 *) &((BR::Array< INT64 > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayUInt64(void * jarg1) {
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt64_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = ((BR::Array< UINT64 > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt64_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = ((BR::Array< UINT64 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt64_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt64_Clear(void * jarg1) {
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayUInt64_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = (bool)((BR::Array< UINT64 > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt64_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt64_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = ((BR::Array< UINT64 > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt64_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = ((BR::Array< UINT64 > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt64_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayUInt64_data(void * jarg1) {
  void * jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  unsigned __int64 *result = 0 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  result = (unsigned __int64 *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_push_back(void * jarg1, unsigned long long jarg2) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  unsigned __int64 *arg2 = 0 ;
  unsigned __int64 temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  temp2 = (unsigned __int64)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->push_back((unsigned __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  size_t arg2 ;
  unsigned __int64 *arg3 = (unsigned __int64 *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned __int64 *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(unsigned __int64 const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt64_RemoveItem(void * jarg1, unsigned long long jarg2) {
  long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  unsigned __int64 *arg2 = 0 ;
  unsigned __int64 temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  temp2 = (unsigned __int64)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->RemoveItem((unsigned __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayUInt64_FindItem(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  unsigned __int64 *arg2 = 0 ;
  unsigned __int64 temp2 ;
  INT result;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  temp2 = (unsigned __int64)jarg2; 
  arg2 = &temp2; 
  result = (INT)(arg1)->FindItem((unsigned __int64 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ArrayUInt64_GetAt(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  BR::Array< UINT64 > *arg1 = (BR::Array< UINT64 > *) 0 ;
  UINT arg2 ;
  unsigned __int64 *result = 0 ;
  
  arg1 = (BR::Array< UINT64 > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (unsigned __int64 *) &((BR::Array< UINT64 > const *)arg1)->GetAt(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayInt32(void * jarg1) {
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt32_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = ((BR::Array< INT32 > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt32_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = ((BR::Array< INT32 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt32_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt32_Clear(void * jarg1) {
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayInt32_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = (bool)((BR::Array< INT32 > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt32_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt32_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = ((BR::Array< INT32 > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayInt32_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = ((BR::Array< INT32 > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayInt32_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayInt32_data(void * jarg1) {
  void * jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  int *result = 0 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  result = (int *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_push_back(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->push_back((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayInt32_RemoveItem(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->RemoveItem((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayInt32_FindItem(void * jarg1, int jarg2) {
  int jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  INT result;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (INT)(arg1)->FindItem((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayInt32_GetAt(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BR::Array< INT32 > *arg1 = (BR::Array< INT32 > *) 0 ;
  UINT arg2 ;
  int *result = 0 ;
  
  arg1 = (BR::Array< INT32 > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (int *) &((BR::Array< INT32 > const *)arg1)->GetAt(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayUInt32(void * jarg1) {
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt32_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = ((BR::Array< UINT32 > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt32_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = ((BR::Array< UINT32 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt32_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt32_Clear(void * jarg1) {
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayUInt32_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = (bool)((BR::Array< UINT32 > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt32_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt32_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = ((BR::Array< UINT32 > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayUInt32_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = ((BR::Array< UINT32 > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayUInt32_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayUInt32_data(void * jarg1) {
  void * jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  result = (unsigned int *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_push_back(void * jarg1, unsigned int jarg2) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->push_back((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(unsigned int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayUInt32_RemoveItem(void * jarg1, unsigned int jarg2) {
  long jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->RemoveItem((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayUInt32_FindItem(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  INT result;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (INT)(arg1)->FindItem((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayUInt32_GetAt(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BR::Array< UINT32 > *arg1 = (BR::Array< UINT32 > *) 0 ;
  UINT arg2 ;
  unsigned int *result = 0 ;
  
  arg1 = (BR::Array< UINT32 > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (unsigned int *) &((BR::Array< UINT32 > const *)arg1)->GetAt(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayBYTE(void * jarg1) {
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayBYTE_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = ((BR::Array< BYTE > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayBYTE_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = ((BR::Array< BYTE > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayBYTE_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayBYTE_Clear(void * jarg1) {
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayBYTE_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = (bool)((BR::Array< BYTE > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayBYTE_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayBYTE_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = ((BR::Array< BYTE > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayBYTE_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = ((BR::Array< BYTE > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayBYTE_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayBYTE_data(void * jarg1) {
  void * jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  result = (unsigned char *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_push_back(void * jarg1, unsigned char jarg2) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->push_back((unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(unsigned char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayBYTE_RemoveItem(void * jarg1, unsigned char jarg2) {
  long jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->RemoveItem((unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayBYTE_FindItem(void * jarg1, unsigned char jarg2) {
  int jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  INT result;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (INT)(arg1)->FindItem((unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ArrayBYTE_GetAt(void * jarg1, unsigned int jarg2) {
  unsigned char jresult ;
  BR::Array< BYTE > *arg1 = (BR::Array< BYTE > *) 0 ;
  UINT arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (BR::Array< BYTE > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (unsigned char *) &((BR::Array< BYTE > const *)arg1)->GetAt(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayChar(void * jarg1) {
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayChar_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = ((BR::Array< char > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayChar_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = ((BR::Array< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayChar_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayChar_Clear(void * jarg1) {
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayChar_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = (bool)((BR::Array< char > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayChar_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayChar_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = ((BR::Array< char > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayChar_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = ((BR::Array< char > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayChar_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrayChar_data(void * jarg1) {
  char * jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  result = (char *)(arg1)->data();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_push_back(void * jarg1, char jarg2) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->push_back((char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_AddItems(void * jarg1, unsigned long jarg2, char * jarg3) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayChar_RemoveItem(void * jarg1, char jarg2) {
  long jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  HRESULT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->RemoveItem((char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayChar_FindItem(void * jarg1, char jarg2) {
  int jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  INT result;
  
  arg1 = (BR::Array< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (INT)(arg1)->FindItem((char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ArrayChar_GetAt(void * jarg1, unsigned int jarg2) {
  char jresult ;
  BR::Array< char > *arg1 = (BR::Array< char > *) 0 ;
  UINT arg2 ;
  char *result = 0 ;
  
  arg1 = (BR::Array< char > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (char *) &((BR::Array< char > const *)arg1)->GetAt(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayEntityUID(void * jarg1) {
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayEntityUID_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = ((BR::Array< BR::EntityUID > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayEntityUID_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = ((BR::Array< BR::EntityUID > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayEntityUID_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayEntityUID_Clear(void * jarg1) {
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayEntityUID_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = (bool)((BR::Array< BR::EntityUID > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayEntityUID_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayEntityUID_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = ((BR::Array< BR::EntityUID > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayEntityUID_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = ((BR::Array< BR::EntityUID > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayEntityUID_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayEntityUID_data(void * jarg1) {
  void * jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  result = (BR::EntityUID *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->push_back((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  size_t arg2 ;
  BR::EntityUID *arg3 = (BR::EntityUID *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (BR::EntityUID *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(BR::EntityUID const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayEntityUID_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemoveItem((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayEntityUID_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (INT)(arg1)->FindItem((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayEntityUID_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< BR::EntityUID > *arg1 = (BR::Array< BR::EntityUID > *) 0 ;
  UINT arg2 ;
  BR::EntityUID *result = 0 ;
  
  arg1 = (BR::Array< BR::EntityUID > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::EntityUID *) &((BR::Array< BR::EntityUID > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPerformanceCounterInfo(void * jarg1) {
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_Clear(void * jarg1) {
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = (bool)((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_data(void * jarg1) {
  void * jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  BR::PerformanceCounterInfo *result = 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  result = (BR::PerformanceCounterInfo *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  BR::PerformanceCounterInfo *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInfo const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->push_back((BR::PerformanceCounterInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  size_t arg2 ;
  BR::PerformanceCounterInfo *arg3 = (BR::PerformanceCounterInfo *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (BR::PerformanceCounterInfo *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(BR::PerformanceCounterInfo const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  BR::PerformanceCounterInfo *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInfo const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemoveItem((BR::PerformanceCounterInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  BR::PerformanceCounterInfo *arg2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInfo const & type is null", 0);
    return 0;
  } 
  result = (INT)(arg1)->FindItem((BR::PerformanceCounterInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInfo_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< BR::PerformanceCounterInfo > *arg1 = (BR::Array< BR::PerformanceCounterInfo > *) 0 ;
  UINT arg2 ;
  BR::PerformanceCounterInfo *result = 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInfo > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::PerformanceCounterInfo *) &((BR::Array< BR::PerformanceCounterInfo > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPerformanceCounterInstanceInfo(void * jarg1) {
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_Clear(void * jarg1) {
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = (bool)((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = ((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_data(void * jarg1) {
  void * jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  BR::PerformanceCounterInstanceInfo *result = 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  result = (BR::PerformanceCounterInstanceInfo *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  BR::PerformanceCounterInstanceInfo *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInstanceInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInstanceInfo const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->push_back((BR::PerformanceCounterInstanceInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  size_t arg2 ;
  BR::PerformanceCounterInstanceInfo *arg3 = (BR::PerformanceCounterInstanceInfo *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (BR::PerformanceCounterInstanceInfo *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(BR::PerformanceCounterInstanceInfo const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  BR::PerformanceCounterInstanceInfo *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInstanceInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInstanceInfo const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemoveItem((BR::PerformanceCounterInstanceInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  BR::PerformanceCounterInstanceInfo *arg2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (BR::PerformanceCounterInstanceInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::PerformanceCounterInstanceInfo const & type is null", 0);
    return 0;
  } 
  result = (INT)(arg1)->FindItem((BR::PerformanceCounterInstanceInfo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInstanceInfo_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *) 0 ;
  UINT arg2 ;
  BR::PerformanceCounterInstanceInfo *result = 0 ;
  
  arg1 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::PerformanceCounterInstanceInfo *) &((BR::Array< BR::PerformanceCounterInstanceInfo > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PerformanceCounter_MAX_COUNTERNAME_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Svr::PerformanceCounter::MAX_COUNTERNAME;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PerformanceCounter(void * jarg1) {
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounter_SetCounterName(void * jarg1, char * jarg2) {
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCounterName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PerformanceCounter_GetCounterName(void * jarg1) {
  char * jresult ;
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  result = (char *)(arg1)->GetCounterName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounter_GetSyncSerial(void * jarg1) {
  unsigned int jresult ;
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  UINT result;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  result = (UINT)(arg1)->GetSyncSerial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT INT64 SWIGSTDCALL CSharp_PerformanceCounter_GetRawValue(void * jarg1) {
  INT64 jresult ;
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  INT64 result;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  result = (arg1)->GetRawValue();
  jresult = result;
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounter_CopyTo(void * jarg1, unsigned int jarg2, void * jarg3) {
  long jresult ;
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  UINT arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (BYTE *)jarg3; 
  result = (HRESULT)(arg1)->CopyTo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounter_CopyFrom(void * jarg1, unsigned int jarg2, void * jarg3) {
  long jresult ;
  BR::Svr::PerformanceCounter *arg1 = (BR::Svr::PerformanceCounter *) 0 ;
  UINT arg2 ;
  BYTE *arg3 = (BYTE *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Svr::PerformanceCounter *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (BYTE *)jarg3; 
  result = (HRESULT)(arg1)->CopyFrom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPerformanceCounterPtr(void * jarg1) {
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = ((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = ((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_Clear(void * jarg1) {
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = (bool)((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = ((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = ((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_data(void * jarg1) {
  void * jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  BR::Svr::PerformanceCounter **result = 0 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  result = (BR::Svr::PerformanceCounter **)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  BR::Svr::PerformanceCounter **arg2 = 0 ;
  BR::Svr::PerformanceCounter *temp2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  temp2 = (BR::Svr::PerformanceCounter *)jarg2;
  arg2 = (BR::Svr::PerformanceCounter **)&temp2; 
  result = (HRESULT)(arg1)->push_back((BR::Svr::PerformanceCounter *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  size_t arg2 ;
  BR::Svr::PerformanceCounter **arg3 = (BR::Svr::PerformanceCounter **) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (BR::Svr::PerformanceCounter **)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(BR::Svr::PerformanceCounter *const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  BR::Svr::PerformanceCounter **arg2 = 0 ;
  BR::Svr::PerformanceCounter *temp2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  temp2 = (BR::Svr::PerformanceCounter *)jarg2;
  arg2 = (BR::Svr::PerformanceCounter **)&temp2; 
  result = (HRESULT)(arg1)->RemoveItem((BR::Svr::PerformanceCounter *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  BR::Svr::PerformanceCounter **arg2 = 0 ;
  BR::Svr::PerformanceCounter *temp2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  temp2 = (BR::Svr::PerformanceCounter *)jarg2;
  arg2 = (BR::Svr::PerformanceCounter **)&temp2; 
  result = (INT)(arg1)->FindItem((BR::Svr::PerformanceCounter *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterPtr_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< BR::Svr::PerformanceCounter * > *arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *) 0 ;
  UINT arg2 ;
  BR::Svr::PerformanceCounter **result = 0 ;
  
  arg1 = (BR::Array< BR::Svr::PerformanceCounter * > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::Svr::PerformanceCounter **) &((BR::Array< BR::Svr::PerformanceCounter * > const *)arg1)->GetAt(arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerformanceCounterInstance_GetUpdatedTime(void * jarg1) {
  void * jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  TimeStampMS result;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  result = (arg1)->GetUpdatedTime();
  jresult = new TimeStampMS((const TimeStampMS &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PerformanceCounterInstance_GetInstanceName(void * jarg1) {
  char * jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  char *result = 0 ;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  result = (char *)(arg1)->GetInstanceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerformanceCounterInstance_GetInstanceEntityUID(void * jarg1) {
  void * jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  BR::EntityUID result;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  result = (arg1)->GetInstanceEntityUID();
  jresult = new BR::EntityUID((const BR::EntityUID &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerformanceCounterInstance_GetCounters(void * jarg1) {
  void * jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  BR::Array< BR::Svr::PerformanceCounter * > *result = 0 ;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  result = (BR::Array< BR::Svr::PerformanceCounter * > *) &(arg1)->GetCounters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerformanceCounterInstance_RegisterToClient(void * jarg1) {
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  (arg1)->RegisterToClient();
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterInstance_AddCounter(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  BR::Svr::PerformanceCounter *arg2 = (BR::Svr::PerformanceCounter *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  arg2 = (BR::Svr::PerformanceCounter *)jarg2; 
  result = (HRESULT)(arg1)->AddCounter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerformanceCounterInstancePtr__SWIG_0() {
  void * jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)new BR::SharedPointerT< BR::Svr::PerformanceCounterInstance >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerformanceCounterInstancePtr__SWIG_1(void * jarg1) {
  void * jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const & type is null", 0);
    return 0;
  } 
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)new BR::SharedPointerT< BR::Svr::PerformanceCounterInstance >((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerformanceCounterInstancePtr__SWIG_2(void * jarg1) {
  void * jresult ;
  BR::Svr::PerformanceCounterInstance *arg1 = (BR::Svr::PerformanceCounterInstance *) 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  arg1 = (BR::Svr::PerformanceCounterInstance *)jarg1; 
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)new BR::SharedPointerT< BR::Svr::PerformanceCounterInstance >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PerformanceCounterInstancePtr(void * jarg1) {
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_GetObjectPtr(void * jarg1) {
  void * jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  BR::Svr::PerformanceCounterInstance *result = 0 ;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  result = (BR::Svr::PerformanceCounterInstance *)(arg1)->GetObjectPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_EqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const *)arg1)->operator ==((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_NotEqualTo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  BR::SharedPointer *arg2 = 0 ;
  bool result;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  arg2 = (BR::SharedPointer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointer const & type is null", 0);
    return 0;
  } 
  result = (bool)((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const *)arg1)->operator !=((BR::SharedPointer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_EqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_NotEqualTo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  BR::SharedObject *arg2 = (BR::SharedObject *) 0 ;
  bool result;
  
  arg1 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg1; 
  arg2 = (BR::SharedObject *)jarg2; 
  result = (bool)((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const *)arg1)->operator !=(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPerformanceCounterInstancePtr(void * jarg1) {
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_GetSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = ((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_size(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = ((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_SetSize(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->SetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_resize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_Clear(void * jarg1) {
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_GetConserveDataOnResize(void * jarg1) {
  unsigned int jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  bool result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = (bool)((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->GetConserveDataOnResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_SetConserveDataOnResize(void * jarg1, unsigned int jarg2) {
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  bool arg2 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConserveDataOnResize(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_GetAllocatedSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = ((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->GetAllocatedSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_GetIncreaseSize(void * jarg1) {
  unsigned long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = ((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->GetIncreaseSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_SetIncreaseSize(void * jarg1, unsigned long jarg2) {
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t arg2 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetIncreaseSize(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_Reserve(void * jarg1, unsigned long jarg2) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (HRESULT)(arg1)->Reserve(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_data(void * jarg1) {
  void * jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)(arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_push_back(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->push_back((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_AddItems(void * jarg1, unsigned long jarg2, void * jarg3) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  size_t arg2 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg3 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg3; 
  result = (HRESULT)(arg1)->AddItems(arg2,(BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_RemoveAt(void * jarg1, int jarg2) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  INT arg2 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (INT)jarg2; 
  result = (HRESULT)(arg1)->RemoveAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_RemoveItem(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemoveItem((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_FindItem(void * jarg1, void * jarg2) {
  int jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg2 = 0 ;
  INT result;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const & type is null", 0);
    return 0;
  } 
  result = (INT)(arg1)->FindItem((BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrayPerformanceCounterInstancePtr_GetAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *) 0 ;
  UINT arg2 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  arg1 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *) &((BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > const *)arg1)->GetAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PerformanceCounterServer_TIMER_TIMOUT_get() {
  int jresult ;
  int result;
  
  result = (int)BR::Svr::PerformanceCounterServer::TIMER_TIMOUT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerformanceCounterServer_MessageHandler(void * jarg1) {
  void * jresult ;
  BR::Svr::PerformanceCounterServer *arg1 = (BR::Svr::PerformanceCounterServer *) 0 ;
  BR::Svr::PerformanceCounterServer::MessageHandler *result = 0 ;
  
  arg1 = (BR::Svr::PerformanceCounterServer *)jarg1; 
  result = (BR::Svr::PerformanceCounterServer::MessageHandler *)new BR::Svr::PerformanceCounterServer::MessageHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_MessageHandler_OnRecv(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  BR::Svr::PerformanceCounterServer::MessageHandler *arg1 = (BR::Svr::PerformanceCounterServer::MessageHandler *) 0 ;
  sockaddr_storage *arg2 = 0 ;
  BR::Message::MessageData *arg3 = (BR::Message::MessageData *) 0 ;
  HRESULT result;
  
  arg1 = (BR::Svr::PerformanceCounterServer::MessageHandler *)jarg1; 
  arg2 = (sockaddr_storage *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sockaddr_storage const & type is null", 0);
    return 0;
  } 
  arg3 = (BR::Message::MessageData *)jarg3; 
  result = (HRESULT)(arg1)->OnRecv((sockaddr_storage const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_Initialize__SWIG_0(char * jarg1, unsigned int jarg2) {
  long jresult ;
  char *arg1 = (char *) 0 ;
  UINT arg2 ;
  HRESULT result;
  
  arg1 = (char *)jarg1; 
  arg2 = (UINT)jarg2; 
  result = (HRESULT)BR::Svr::PerformanceCounterServer::Initialize((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_Initialize__SWIG_1(void * jarg1) {
  long jresult ;
  BR::NetAddress *arg1 = 0 ;
  HRESULT result;
  
  arg1 = (BR::NetAddress *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::NetAddress const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)BR::Svr::PerformanceCounterServer::Initialize((BR::NetAddress const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_Terminate() {
  long jresult ;
  HRESULT result;
  
  result = (HRESULT)BR::Svr::PerformanceCounterServer::Terminate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterServer_GetInstanceCount() {
  unsigned int jresult ;
  UINT result;
  
  result = (UINT)BR::Svr::PerformanceCounterServer::GetInstanceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PerformanceCounterServer_GetInstanceList(unsigned int jarg1, void * jarg2) {
  unsigned int jresult ;
  UINT arg1 ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *arg2 = 0 ;
  UINT result;
  
  arg1 = (UINT)jarg1; 
  arg2 = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > & type is null", 0);
    return 0;
  } 
  result = (UINT)BR::Svr::PerformanceCounterServer::GetInstanceList(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_GetInstance__SWIG_0(unsigned long long jarg1, void * jarg2) {
  long jresult ;
  UINT64 arg1 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (UINT64)jarg1; 
  arg2 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > & type is null", 0);
    return 0;
  } 
  result = (HRESULT)BR::Svr::PerformanceCounterServer::GetInstance(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PerformanceCounterServer_GetInstance__SWIG_1(void * jarg1, void * jarg2) {
  long jresult ;
  BR::EntityUID arg1 ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *arg2 = 0 ;
  BR::EntityUID *argp1 ;
  HRESULT result;
  
  argp1 = (BR::EntityUID *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BR::EntityUID", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > & type is null", 0);
    return 0;
  } 
  result = (HRESULT)BR::Svr::PerformanceCounterServer::GetInstance(arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetPolicyMonitoring(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Policy::NetPolicyMonitoring *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Policy::NetPolicyMonitoring *)new BR::Policy::NetPolicyMonitoring(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyMonitoring_GetInstanceListCmd(void * jarg1, unsigned long long jarg2) {
  long jresult ;
  BR::Policy::NetPolicyMonitoring *arg1 = (BR::Policy::NetPolicyMonitoring *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::Context temp2 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyMonitoring *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  result = (HRESULT)(arg1)->GetInstanceListCmd((BR::Context const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyMonitoring_RequestCounterValuesCmd(void * jarg1, unsigned long long jarg2, void * jarg3) {
  long jresult ;
  BR::Policy::NetPolicyMonitoring *arg1 = (BR::Policy::NetPolicyMonitoring *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::EntityUID *arg3 = 0 ;
  BR::Context temp2 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyMonitoring *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::EntityUID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RequestCounterValuesCmd((BR::Context const &)*arg2,(BR::EntityUID const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyMonitoring_PerformanceCounterNewC2SEvt(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  long jresult ;
  BR::Policy::NetPolicyMonitoring *arg1 = (BR::Policy::NetPolicyMonitoring *) 0 ;
  char *arg2 = (char *) 0 ;
  BR::EntityUID *arg3 = 0 ;
  BR::Array< BR::PerformanceCounterInfo > *arg4 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyMonitoring *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (BR::EntityUID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  arg4 = (BR::Array< BR::PerformanceCounterInfo > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BR::PerformanceCounterInfo > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->PerformanceCounterNewC2SEvt((char const *)arg2,(BR::EntityUID const &)*arg3,(BR::Array< BR::PerformanceCounterInfo > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyMonitoring_PerformanceCounterFreeC2SEvt(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Policy::NetPolicyMonitoring *arg1 = (BR::Policy::NetPolicyMonitoring *) 0 ;
  BR::Array< BR::EntityUID > *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyMonitoring *)jarg1; 
  arg2 = (BR::Array< BR::EntityUID > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BR::EntityUID > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->PerformanceCounterFreeC2SEvt((BR::Array< BR::EntityUID > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyMonitoring_PerformanceCounterUpdateC2SEvt(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  BR::Policy::NetPolicyMonitoring *arg1 = (BR::Policy::NetPolicyMonitoring *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  BR::Array< UINT64 > *arg3 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyMonitoring *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  arg3 = (BR::Array< UINT64 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< UINT64 > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->PerformanceCounterUpdateC2SEvt((BR::EntityUID const &)*arg2,(BR::Array< UINT64 > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetSvrPolicyMonitoring(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Policy::NetSvrPolicyMonitoring *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Policy::NetSvrPolicyMonitoring *)new BR::Policy::NetSvrPolicyMonitoring(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyMonitoring_GetInstanceListRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyMonitoring *arg1 = (BR::Policy::NetSvrPolicyMonitoring *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::Array< BR::PerformanceCounterInstanceInfo > *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyMonitoring *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::Array< BR::PerformanceCounterInstanceInfo > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BR::PerformanceCounterInstanceInfo > const & type is null", 0);
    return 0;
  } 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->GetInstanceListRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::Array< BR::PerformanceCounterInstanceInfo > const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyMonitoring_RequestCounterValuesRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, void * jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyMonitoring *arg1 = (BR::Policy::NetSvrPolicyMonitoring *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::EntityUID *arg4 = 0 ;
  BR::Array< UINT64 > *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyMonitoring *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::EntityUID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  arg5 = (BR::Array< UINT64 > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< UINT64 > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RequestCounterValuesRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::EntityUID const &)*arg4,(BR::Array< UINT64 > const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyMonitoring_PerformanceCounterUpdateCounterInfoS2CEvt(void * jarg1, void * jarg2) {
  long jresult ;
  BR::Policy::NetSvrPolicyMonitoring *arg1 = (BR::Policy::NetSvrPolicyMonitoring *) 0 ;
  BR::EntityUID *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyMonitoring *)jarg1; 
  arg2 = (BR::EntityUID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::EntityUID const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->PerformanceCounterUpdateCounterInfoS2CEvt((BR::EntityUID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetPolicyRanking(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Policy::NetPolicyRanking *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Policy::NetPolicyRanking *)new BR::Policy::NetPolicyRanking(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyRanking_AddPlayerCmd(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned long long jarg4, unsigned long long jarg5, void * jarg6) {
  long jresult ;
  BR::Policy::NetPolicyRanking *arg1 = (BR::Policy::NetPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::RouteContext *arg3 = 0 ;
  BR::PlayerID *arg4 = 0 ;
  UINT64 *arg5 = 0 ;
  BR::Array< BYTE > *arg6 = 0 ;
  BR::Context temp2 ;
  BR::PlayerID temp4 ;
  UINT64 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::RouteContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp4 = (BR::PlayerID)jarg4; 
  arg4 = &temp4; 
  temp5 = (UINT64)jarg5; 
  arg5 = &temp5; 
  arg6 = (BR::Array< BYTE > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BYTE > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->AddPlayerCmd((BR::Context const &)*arg2,(BR::RouteContext const &)*arg3,(BR::PlayerID const &)*arg4,(UINT64 const &)*arg5,(BR::Array< BYTE > const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyRanking_RemovePlayerCmd(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned long long jarg4) {
  long jresult ;
  BR::Policy::NetPolicyRanking *arg1 = (BR::Policy::NetPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::RouteContext *arg3 = 0 ;
  BR::PlayerID *arg4 = 0 ;
  BR::Context temp2 ;
  BR::PlayerID temp4 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::RouteContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp4 = (BR::PlayerID)jarg4; 
  arg4 = &temp4; 
  result = (HRESULT)(arg1)->RemovePlayerCmd((BR::Context const &)*arg2,(BR::RouteContext const &)*arg3,(BR::PlayerID const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyRanking_GetPlayerRankingCmd(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned long long jarg4) {
  long jresult ;
  BR::Policy::NetPolicyRanking *arg1 = (BR::Policy::NetPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::RouteContext *arg3 = 0 ;
  BR::PlayerID *arg4 = 0 ;
  BR::Context temp2 ;
  BR::PlayerID temp4 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::RouteContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp4 = (BR::PlayerID)jarg4; 
  arg4 = &temp4; 
  result = (HRESULT)(arg1)->GetPlayerRankingCmd((BR::Context const &)*arg2,(BR::RouteContext const &)*arg3,(BR::PlayerID const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyRanking_UpdatePlayerCmd(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned long long jarg4, unsigned long long jarg5, void * jarg6) {
  long jresult ;
  BR::Policy::NetPolicyRanking *arg1 = (BR::Policy::NetPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::RouteContext *arg3 = 0 ;
  BR::PlayerID *arg4 = 0 ;
  UINT64 *arg5 = 0 ;
  BR::Array< BYTE > *arg6 = 0 ;
  BR::Context temp2 ;
  BR::PlayerID temp4 ;
  UINT64 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::RouteContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp4 = (BR::PlayerID)jarg4; 
  arg4 = &temp4; 
  temp5 = (UINT64)jarg5; 
  arg5 = &temp5; 
  arg6 = (BR::Array< BYTE > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::Array< BYTE > const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->UpdatePlayerCmd((BR::Context const &)*arg2,(BR::RouteContext const &)*arg3,(BR::PlayerID const &)*arg4,(UINT64 const &)*arg5,(BR::Array< BYTE > const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetPolicyRanking_GetRankingCmd(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetPolicyRanking *arg1 = (BR::Policy::NetPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  BR::RouteContext *arg3 = 0 ;
  UINT32 *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  UINT32 temp4 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  arg3 = (BR::RouteContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp4 = (UINT32)jarg4; 
  arg4 = &temp4; 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->GetRankingCmd((BR::Context const &)*arg2,(BR::RouteContext const &)*arg3,(UINT32 const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetSvrPolicyRanking(void * jarg1) {
  void * jresult ;
  BR::Net::IConnection *arg1 = (BR::Net::IConnection *) 0 ;
  BR::Policy::NetSvrPolicyRanking *result = 0 ;
  
  arg1 = (BR::Net::IConnection *)jarg1; 
  result = (BR::Policy::NetSvrPolicyRanking *)new BR::Policy::NetSvrPolicyRanking(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyRanking_AddPlayerRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyRanking *arg1 = (BR::Policy::NetSvrPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::RouteContext *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::RouteContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->AddPlayerRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::RouteContext const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyRanking_RemovePlayerRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4) {
  long jresult ;
  BR::Policy::NetSvrPolicyRanking *arg1 = (BR::Policy::NetSvrPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::RouteContext *arg4 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::RouteContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  result = (HRESULT)(arg1)->RemovePlayerRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::RouteContext const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyRanking_GetPlayerRankingRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyRanking *arg1 = (BR::Policy::NetSvrPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::RouteContext *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::RouteContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->GetPlayerRankingRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::RouteContext const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyRanking_UpdatePlayerRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyRanking *arg1 = (BR::Policy::NetSvrPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::RouteContext *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::RouteContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->UpdatePlayerRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::RouteContext const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_NetSvrPolicyRanking_GetRankingRes(void * jarg1, unsigned long long jarg2, long jarg3, void * jarg4, unsigned int jarg5) {
  long jresult ;
  BR::Policy::NetSvrPolicyRanking *arg1 = (BR::Policy::NetSvrPolicyRanking *) 0 ;
  BR::Context *arg2 = 0 ;
  HRESULT *arg3 = 0 ;
  BR::RouteContext *arg4 = 0 ;
  UINT32 *arg5 = 0 ;
  BR::Context temp2 ;
  HRESULT temp3 ;
  UINT32 temp5 ;
  HRESULT result;
  
  arg1 = (BR::Policy::NetSvrPolicyRanking *)jarg1; 
  temp2 = (BR::Context)jarg2; 
  arg2 = &temp2; 
  temp3 = (HRESULT)jarg3; 
  arg3 = &temp3; 
  arg4 = (BR::RouteContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BR::RouteContext const & type is null", 0);
    return 0;
  } 
  temp5 = (UINT32)jarg5; 
  arg5 = &temp5; 
  result = (HRESULT)(arg1)->GetRankingRes((BR::Context const &)*arg2,(HRESULT const &)*arg3,(BR::RouteContext const &)*arg4,(UINT32 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InitializeNativeSystem(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)InitializeNativeSystem((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TerminateNativeSystem() {
  int jresult ;
  int result;
  
  result = (int)TerminateNativeSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreatePerformanceCounterInstanceArray() {
  void * jresult ;
  BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *result = 0 ;
  
  result = (BR::Array< BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > > *)CreatePerformanceCounterInstanceArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreatePerformanceCounterInstance() {
  void * jresult ;
  BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *result = 0 ;
  
  result = (BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *)CreatePerformanceCounterInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT BR::PlayerInformation * SWIGSTDCALL CSharp_RankingPlayerInformation_SWIGUpcast(BR::RankingPlayerInformation *jarg1) {
    return (BR::PlayerInformation *)jarg1;
}

SWIGEXPORT BR::RankingPlayerInformation * SWIGSTDCALL CSharp_FriendInformation_SWIGUpcast(BR::FriendInformation *jarg1) {
    return (BR::RankingPlayerInformation *)jarg1;
}

SWIGEXPORT BR::FriendInformation * SWIGSTDCALL CSharp_ServerFriendInformation_SWIGUpcast(BR::ServerFriendInformation *jarg1) {
    return (BR::FriendInformation *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogChatMessage_SWIGUpcast(BR::GameLogChatMessage *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogGameStateChange_SWIGUpcast(BR::GameLogGameStateChange *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogVote_SWIGUpcast(BR::GameLogVote *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogVoteResult_SWIGUpcast(BR::GameLogVoteResult *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogPlayerKilled_SWIGUpcast(BR::GameLogPlayerKilled *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::GameLogItem * SWIGSTDCALL CSharp_GameLogGameEnd_SWIGUpcast(BR::GameLogGameEnd *jarg1) {
    return (BR::GameLogItem *)jarg1;
}

SWIGEXPORT BR::Message::MessageHeader * SWIGSTDCALL CSharp_MobileMessageHeader_SWIGUpcast(BR::Message::MobileMessageHeader *jarg1) {
    return (BR::Message::MessageHeader *)jarg1;
}

SWIGEXPORT BR::SharedObject * SWIGSTDCALL CSharp_IConnection_SWIGUpcast(BR::Net::IConnection *jarg1) {
    return (BR::SharedObject *)jarg1;
}

SWIGEXPORT BR::Net::INet * SWIGSTDCALL CSharp_IClient_SWIGUpcast(BR::Net::IClient *jarg1) {
    return (BR::Net::INet *)jarg1;
}

SWIGEXPORT BR::IPolicyBase * SWIGSTDCALL CSharp_INetPolicy_SWIGUpcast(BR::Net::INetPolicy *jarg1) {
    return (BR::IPolicyBase *)jarg1;
}

SWIGEXPORT BR::SharedObject * SWIGSTDCALL CSharp_PerformanceCounterInstance_SWIGUpcast(BR::Svr::PerformanceCounterInstance *jarg1) {
    return (BR::SharedObject *)jarg1;
}

SWIGEXPORT BR::SharedPointer * SWIGSTDCALL CSharp_PerformanceCounterInstancePtr_SWIGUpcast(BR::SharedPointerT< BR::Svr::PerformanceCounterInstance > *jarg1) {
    return (BR::SharedPointer *)jarg1;
}

#ifdef __cplusplus
}
#endif

