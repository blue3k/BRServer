//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class MessageData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MessageData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MessageData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MessageData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BRMonitoringPINVOKE.delete_MessageData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe MessageHeader GetMessageHeader() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_GetMessageHeader(swigCPtr);
    MessageHeader ret = (cPtr == global::System.IntPtr.Zero) ? null : new MessageHeader(cPtr, false);
    return ret;
  }

  public unsafe MobileMessageHeader GetMobileMessageHeader() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_GetMobileMessageHeader(swigCPtr);
    MobileMessageHeader ret = (cPtr == global::System.IntPtr.Zero) ? null : new MobileMessageHeader(cPtr, false);
    return ret;
  }

  public unsafe SWIGTYPE_p_unsigned_char GetMessageBuff() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_GetMessageBuff(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public unsafe uint GetMessageSize() {
    uint ret = BRMonitoringPINVOKE.MessageData_GetMessageSize(swigCPtr);
    return ret;
  }

  public unsafe SWIGTYPE_p_unsigned_char GetMessageData() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_GetMessageData(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public unsafe void GetLengthNDataPtr(SWIGTYPE_p_unsigned_int length, SWIGTYPE_p_p_unsigned_char pDataPtr) {
    BRMonitoringPINVOKE.MessageData_GetLengthNDataPtr(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(length), SWIGTYPE_p_p_unsigned_char.getCPtr(pDataPtr));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe uint GetDataLength() {
    uint ret = BRMonitoringPINVOKE.MessageData_GetDataLength(swigCPtr);
    return ret;
  }

  public unsafe void GetRouteInfo(RouteContext routeContext, TransactionID transID) {
    BRMonitoringPINVOKE.MessageData_GetRouteInfo(swigCPtr, RouteContext.getCPtr(routeContext), TransactionID.getCPtr(transID));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe void ClearAssignedSequence() {
    BRMonitoringPINVOKE.MessageData_ClearAssignedSequence(swigCPtr);
  }

  public unsafe void AssignSequence(uint sequence) {
    BRMonitoringPINVOKE.MessageData_AssignSequence(swigCPtr, sequence);
  }

  public unsafe bool GetIsSequenceAssigned() {
    bool ret = BRMonitoringPINVOKE.MessageData_GetIsSequenceAssigned(swigCPtr);
    return ret;
  }

  public unsafe static MessageData NewMessage(uint uiMsgID, uint uiMsgBufSize, SWIGTYPE_p_unsigned_char pData) {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_NewMessage__SWIG_0(uiMsgID, uiMsgBufSize, SWIGTYPE_p_unsigned_char.getCPtr(pData));
    MessageData ret = (cPtr == global::System.IntPtr.Zero) ? null : new MessageData(cPtr, false);
    return ret;
  }

  public unsafe static MessageData NewMessage(uint uiMsgID, uint uiMsgBufSize) {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_NewMessage__SWIG_1(uiMsgID, uiMsgBufSize);
    MessageData ret = (cPtr == global::System.IntPtr.Zero) ? null : new MessageData(cPtr, false);
    return ret;
  }

  public unsafe MessageData Clone() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.MessageData_Clone(swigCPtr);
    MessageData ret = (cPtr == global::System.IntPtr.Zero) ? null : new MessageData(cPtr, false);
    return ret;
  }

  public unsafe void UpdateChecksum() {
    BRMonitoringPINVOKE.MessageData_UpdateChecksum(swigCPtr);
  }

  public unsafe void UpdateChecksumNEncrypt() {
    BRMonitoringPINVOKE.MessageData_UpdateChecksumNEncrypt(swigCPtr);
  }

  public unsafe int ValidateChecksum() {
    int ret = BRMonitoringPINVOKE.MessageData_ValidateChecksum(swigCPtr);
    return ret;
  }

  public unsafe int ValidateChecksumNDecrypt() {
    int ret = BRMonitoringPINVOKE.MessageData_ValidateChecksumNDecrypt(swigCPtr);
    return ret;
  }

  public unsafe void DeleteThis() {
    BRMonitoringPINVOKE.MessageData_DeleteThis(swigCPtr);
  }

}

}
