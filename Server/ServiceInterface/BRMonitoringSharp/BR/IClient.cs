//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class IClient : INet {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IClient(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.IClient_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IClient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public unsafe int GetConnection(System.UInt64 uiCID, SWIGTYPE_p_BR__SharedPointerTT_BR__Net__IConnection_t pIConnection) {
System.UInt64* tempuiCID = &uiCID;
    {
      int ret = BRMonitoringPINVOKE.IClient_GetConnection(swigCPtr, *tempuiCID, SWIGTYPE_p_BR__SharedPointerTT_BR__Net__IConnection_t.getCPtr(pIConnection));
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public unsafe int ConnectCli(NetAddress destAddress, SWIGTYPE_p_p_BR__Net__IConnection pINewConnection) {
    int ret = BRMonitoringPINVOKE.IClient_ConnectCli(swigCPtr, NetAddress.getCPtr(destAddress), SWIGTYPE_p_p_BR__Net__IConnection.getCPtr(pINewConnection));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
