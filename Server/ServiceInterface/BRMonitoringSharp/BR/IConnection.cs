//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class IConnection : SharedObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IConnection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.IConnection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IConnection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IConnection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BRMonitoringPINVOKE.delete_IConnection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class tag_Event : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal tag_Event(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(tag_Event obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public unsafe static IConnection.tag_Event NullValue {
      set {
        BRMonitoringPINVOKE.IConnection_tag_Event_NullValue_set(IConnection.tag_Event.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BRMonitoringPINVOKE.IConnection_tag_Event_NullValue_get();
        IConnection.tag_Event ret = (cPtr == global::System.IntPtr.Zero) ? null : new IConnection.tag_Event(cPtr, false);
        return ret;
      } 
    }
  
    public unsafe IConnection.tag_Event.EventTypes EventType {
      set {
        BRMonitoringPINVOKE.IConnection_tag_Event_EventType_set(swigCPtr, (int)value);
      } 
      get {
        IConnection.tag_Event.EventTypes ret = (IConnection.tag_Event.EventTypes)BRMonitoringPINVOKE.IConnection_tag_Event_EventType_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe tag_Event() : this(BRMonitoringPINVOKE.new_IConnection_tag_Event__SWIG_0(), true) {
    }
  
    public unsafe tag_Event(IConnection.tag_Event.EventTypes eventType, int hrRes) : this(BRMonitoringPINVOKE.new_IConnection_tag_Event__SWIG_1((int)eventType, hrRes), true) {
    }
  
    public unsafe tag_Event(IConnection.tag_Event.EventTypes eventType, IConnection.ConnectionState InState) : this(BRMonitoringPINVOKE.new_IConnection_tag_Event__SWIG_2((int)eventType, (int)InState), true) {
    }
  
    public unsafe IConnection.tag_Event CopyFrom(IConnection.tag_Event src) {
      IConnection.tag_Event ret = new IConnection.tag_Event(BRMonitoringPINVOKE.IConnection_tag_Event_CopyFrom(swigCPtr, IConnection.tag_Event.getCPtr(src)), false);
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public unsafe bool EqualTo(IConnection.tag_Event src) {
      bool ret = BRMonitoringPINVOKE.IConnection_tag_Event_EqualTo(swigCPtr, IConnection.tag_Event.getCPtr(src));
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public enum EventTypes {
      EVT_NONE,
      EVT_CONNECTION_RESULT,
      EVT_DISCONNECTED,
      EVT_STATE_CHANGE,
      EVT_ADDRESS_REMAPPED
    }
  
  }

  public class ConnectionInformation : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ConnectionInformation(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConnectionInformation obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public unsafe NetAddress Local {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_Local_set(swigCPtr, NetAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BRMonitoringPINVOKE.IConnection_ConnectionInformation_Local_get(swigCPtr);
        NetAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new NetAddress(cPtr, false);
        return ret;
      } 
    }
  
    public unsafe NetClass LocalClass {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_LocalClass_set(swigCPtr, (int)value);
      } 
      get {
        NetClass ret = (NetClass)BRMonitoringPINVOKE.IConnection_ConnectionInformation_LocalClass_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe ulong LocalID {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_LocalID_set(swigCPtr, value);
      } 
      get {
        ulong ret = BRMonitoringPINVOKE.IConnection_ConnectionInformation_LocalID_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe NetAddress Remote {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_Remote_set(swigCPtr, NetAddress.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BRMonitoringPINVOKE.IConnection_ConnectionInformation_Remote_get(swigCPtr);
        NetAddress ret = (cPtr == global::System.IntPtr.Zero) ? null : new NetAddress(cPtr, false);
        return ret;
      } 
    }
  
    public unsafe NetClass RemoteClass {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_RemoteClass_set(swigCPtr, (int)value);
      } 
      get {
        NetClass ret = (NetClass)BRMonitoringPINVOKE.IConnection_ConnectionInformation_RemoteClass_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe ulong RemoteID {
      set {
        BRMonitoringPINVOKE.IConnection_ConnectionInformation_RemoteID_set(swigCPtr, value);
      } 
      get {
        ulong ret = BRMonitoringPINVOKE.IConnection_ConnectionInformation_RemoteID_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe void SetLocalInfo(NetClass Class, NetAddress Addr, ulong UID) {
      BRMonitoringPINVOKE.IConnection_ConnectionInformation_SetLocalInfo(swigCPtr, (int)Class, NetAddress.getCPtr(Addr), UID);
      if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public unsafe void SetRemoteInfo(NetClass Class, ulong UID) {
      BRMonitoringPINVOKE.IConnection_ConnectionInformation_SetRemoteInfo(swigCPtr, (int)Class, UID);
    }
  
  }

  public class Statistic : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Statistic(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Statistic obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public unsafe uint RoundTripLatencyMS {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_RoundTripLatencyMS_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_RoundTripLatencyMS_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint ThroughputBPS {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_ThroughputBPS_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_ThroughputBPS_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint PeakThroughputBPS {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_PeakThroughputBPS_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_PeakThroughputBPS_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint PacketsSentGuaranteed {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_PacketsSentGuaranteed_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_PacketsSentGuaranteed_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint PacketsSentNonGuaranteed {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_PacketsSentNonGuaranteed_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_PacketsSentNonGuaranteed_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint PacketsRetried {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_PacketsRetried_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_PacketsRetried_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint PacketsDropped {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_PacketsDropped_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_PacketsDropped_get(swigCPtr);
        return ret;
      } 
    }
  
    public unsafe uint MessagesReceived {
      set {
        BRMonitoringPINVOKE.IConnection_Statistic_MessagesReceived_set(swigCPtr, value);
      } 
      get {
        uint ret = BRMonitoringPINVOKE.IConnection_Statistic_MessagesReceived_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public unsafe int SetupNet(INet pNetInstance, uint uiCID) {
    int ret = BRMonitoringPINVOKE.IConnection_SetupNet(swigCPtr, INet.getCPtr(pNetInstance), uiCID);
    return ret;
  }

  public unsafe IConnection.ConnectionInformation GetConnectionInfo() {
    IConnection.ConnectionInformation ret = new IConnection.ConnectionInformation(BRMonitoringPINVOKE.IConnection_GetConnectionInfo(swigCPtr), false);
    return ret;
  }

  public unsafe void SetRemoteID(ulong newID) {
    BRMonitoringPINVOKE.IConnection_SetRemoteID(swigCPtr, newID);
  }

  public unsafe System.UInt64 GetCID() { return BRMonitoringPINVOKE.IConnection_GetCID(swigCPtr); }

  public unsafe void ClearCID() {
    BRMonitoringPINVOKE.IConnection_ClearCID(swigCPtr);
  }

  public unsafe ulong GetPeerID() {
    ulong ret = BRMonitoringPINVOKE.IConnection_GetPeerID(swigCPtr);
    return ret;
  }

  public unsafe IConnection.ConnectionState GetConnectionState() {
    IConnection.ConnectionState ret = (IConnection.ConnectionState)BRMonitoringPINVOKE.IConnection_GetConnectionState(swigCPtr);
    return ret;
  }

  public unsafe void SetLocalClass(NetClass uiLocalClass) {
    BRMonitoringPINVOKE.IConnection_SetLocalClass(swigCPtr, (int)uiLocalClass);
  }

  public unsafe int CreatePolicy(uint uiPolicy) {
    int ret = BRMonitoringPINVOKE.IConnection_CreatePolicy(swigCPtr, uiPolicy);
    return ret;
  }

  public unsafe System.UInt64 GetUData() { return BRMonitoringPINVOKE.IConnection_GetUData(swigCPtr); }

  public unsafe void SetUData(System.UInt64 UData) {
System.UInt64* tempUData = &UData;
    {
      BRMonitoringPINVOKE.IConnection_SetUData(swigCPtr, *tempUData);
    }
  }

  public unsafe uint GetConnectionTime() {
    uint ret = BRMonitoringPINVOKE.IConnection_GetConnectionTime(swigCPtr);
    return ret;
  }

  public unsafe INet GetNet() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.IConnection_GetNet(swigCPtr);
    INet ret = (cPtr == global::System.IntPtr.Zero) ? null : new INet(cPtr, false);
    return ret;
  }

  public unsafe IConnectionEventHandler GetEventHandler() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.IConnection_GetEventHandler(swigCPtr);
    IConnectionEventHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new IConnectionEventHandler(cPtr, false);
    return ret;
  }

  public unsafe void SetEventHandler(IConnectionEventHandler pEventHandler) {
    BRMonitoringPINVOKE.IConnection_SetEventHandler(swigCPtr, IConnectionEventHandler.getCPtr(pEventHandler));
  }

  public unsafe void SetConnectionEventHandler(IConnectionEventHandler pEventHandler) {
    BRMonitoringPINVOKE.IConnection_SetConnectionEventHandler(swigCPtr, IConnectionEventHandler.getCPtr(pEventHandler));
  }

  public unsafe int InitConnection(NetAddress Addr, NetClass netClass) {
    int ret = BRMonitoringPINVOKE.IConnection_InitConnection(swigCPtr, NetAddress.getCPtr(Addr), (int)netClass);
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int Disconnect() {
    int ret = BRMonitoringPINVOKE.IConnection_Disconnect(swigCPtr);
    return ret;
  }

  public unsafe int CloseConnection() {
    int ret = BRMonitoringPINVOKE.IConnection_CloseConnection(swigCPtr);
    return ret;
  }

  public unsafe int Send(SWIGTYPE_p_p_BR__Message__MessageData pMsg) {
    int ret = BRMonitoringPINVOKE.IConnection_Send(swigCPtr, SWIGTYPE_p_p_BR__Message__MessageData.getCPtr(pMsg));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe ulong GetRecvMessageCount() {
    ulong ret = BRMonitoringPINVOKE.IConnection_GetRecvMessageCount(swigCPtr);
    return ret;
  }

  public unsafe ulong GetConnectionEventCount() {
    ulong ret = BRMonitoringPINVOKE.IConnection_GetConnectionEventCount(swigCPtr);
    return ret;
  }

  public unsafe int DequeueConnectionEvent(IConnection.tag_Event curEvent) {
    int ret = BRMonitoringPINVOKE.IConnection_DequeueConnectionEvent(swigCPtr, IConnection.tag_Event.getCPtr(curEvent));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int GetRecvMessage(SWIGTYPE_p_p_BR__Message__MessageData pIMsg) {
    int ret = BRMonitoringPINVOKE.IConnection_GetRecvMessage(swigCPtr, SWIGTYPE_p_p_BR__Message__MessageData.getCPtr(pIMsg));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe int UpdateNetCtrl() {
    int ret = BRMonitoringPINVOKE.IConnection_UpdateNetCtrl(swigCPtr);
    return ret;
  }

  public enum ConnectionState {
    STATE_NONE,
    STATE_WAITING,
    STATE_UDP_WAITING,
    STATE_CONNECTING,
    STATE_CHECKVERSION,
    STATE_CONNECTED,
    STATE_DISCONNECTING,
    STATE_DISCONNECTED,
    STATE_SLEEP
  }

}

}
