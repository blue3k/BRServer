//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class PerformanceCounterInstancePtr : SharedPointer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PerformanceCounterInstancePtr(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BRMonitoringPINVOKE.PerformanceCounterInstancePtr_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PerformanceCounterInstancePtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PerformanceCounterInstancePtr() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BRMonitoringPINVOKE.delete_PerformanceCounterInstancePtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public unsafe PerformanceCounterInstancePtr() : this(BRMonitoringPINVOKE.new_PerformanceCounterInstancePtr__SWIG_0(), true) {
  }

  public unsafe PerformanceCounterInstancePtr(PerformanceCounterInstancePtr src) : this(BRMonitoringPINVOKE.new_PerformanceCounterInstancePtr__SWIG_1(PerformanceCounterInstancePtr.getCPtr(src)), true) {
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe PerformanceCounterInstancePtr(PerformanceCounterInstance pRef) : this(BRMonitoringPINVOKE.new_PerformanceCounterInstancePtr__SWIG_2(PerformanceCounterInstance.getCPtr(pRef)), true) {
  }

  public unsafe PerformanceCounterInstance GetObjectPtr() {
    global::System.IntPtr cPtr = BRMonitoringPINVOKE.PerformanceCounterInstancePtr_GetObjectPtr(swigCPtr);
    PerformanceCounterInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new PerformanceCounterInstance(cPtr, false);
    return ret;
  }

  public unsafe bool EqualTo(SharedPointer src) {
    bool ret = BRMonitoringPINVOKE.PerformanceCounterInstancePtr_EqualTo__SWIG_0(swigCPtr, SharedPointer.getCPtr(src));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe bool NotEqualTo(SharedPointer src) {
    bool ret = BRMonitoringPINVOKE.PerformanceCounterInstancePtr_NotEqualTo__SWIG_0(swigCPtr, SharedPointer.getCPtr(src));
    if (BRMonitoringPINVOKE.SWIGPendingException.Pending) throw BRMonitoringPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe bool EqualTo(SharedObject pRef) {
    bool ret = BRMonitoringPINVOKE.PerformanceCounterInstancePtr_EqualTo__SWIG_1(swigCPtr, SharedObject.getCPtr(pRef));
    return ret;
  }

  public unsafe bool NotEqualTo(SharedObject pRef) {
    bool ret = BRMonitoringPINVOKE.PerformanceCounterInstancePtr_NotEqualTo__SWIG_1(swigCPtr, SharedObject.getCPtr(pRef));
    return ret;
  }

}

}
