//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BR {

public class PerformanceCounter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PerformanceCounter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PerformanceCounter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PerformanceCounter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BRMonitoringPINVOKE.delete_PerformanceCounter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public unsafe void SetCounterName(string strName) {
    BRMonitoringPINVOKE.PerformanceCounter_SetCounterName(swigCPtr, strName);
  }

  public unsafe string GetCounterName() {
    string ret = BRMonitoringPINVOKE.PerformanceCounter_GetCounterName(swigCPtr);
    return ret;
  }

  public unsafe uint GetSyncSerial() {
    uint ret = BRMonitoringPINVOKE.PerformanceCounter_GetSyncSerial(swigCPtr);
    return ret;
  }

  public unsafe System.Int64 GetRawValue() { return BRMonitoringPINVOKE.PerformanceCounter_GetRawValue(swigCPtr); }

  public unsafe int CopyTo(uint bufferSize, SWIGTYPE_p_unsigned_char pBuffer) {
    int ret = BRMonitoringPINVOKE.PerformanceCounter_CopyTo(swigCPtr, bufferSize, SWIGTYPE_p_unsigned_char.getCPtr(pBuffer));
    return ret;
  }

  public unsafe int CopyFrom(uint bufferSize, SWIGTYPE_p_unsigned_char pBuffer) {
    int ret = BRMonitoringPINVOKE.PerformanceCounter_CopyFrom(swigCPtr, bufferSize, SWIGTYPE_p_unsigned_char.getCPtr(pBuffer));
    return ret;
  }

  public unsafe static readonly int MAX_COUNTERNAME = BRMonitoringPINVOKE.PerformanceCounter_MAX_COUNTERNAME_get();

  public enum DataTypes {
    Int32,
    UInt32,
    Int64,
    UInt64
  }

  public enum CountingTypes {
    Raw,
    AveragePerSec,
    TickPerSec
  }

}

}
